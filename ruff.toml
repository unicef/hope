target-version = "py313"
line-length = 120
exclude = ["src/frontend", "src/hope/one_time_scripts", "manage.py"]

[lint]
select = [
    "A", # prevent using keywords that clobber python builtins
    "B", # bugbear: security warnings
    "BLE", # blind exceptions
    "C4", # flake8-comprehensions
    "C90", # McCabe complexity
    "COM", # flake8-commas
    "D", # pydocstyle
    "DJ", # flake8-django
    "E", # pycodestylex
    "E4", "E7", "E9",
    "ERA", # eradicate
    "F", # pyflakes
    "FLY", # flynt
    "FURB", # refurb
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # implicit string concatenation
    "N", # Pep* naming
    "PERF", # perflint
    "PIE", # flake8-pie
    "PL", # PyLint
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "R", # PyLint Refactor
    "RET", # flake8-return
    "S", # bandit,
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TC", # flake8-type-checking
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "YTT", # flake8 2020
]
extend-select = ["UP", ]
ignore = [
    "ANN401",
    "B904",  # raise-without-from-inside-except: syntax not compatible with py2
    "COM812",
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", #  Missing docstring in public method
    "D103", #  Missing docstring in public function
    "D104", #  Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in `__init__`
    "D203", # one-blank-line-before-class
#    "D212", # multi-line-summary-first-line
    "D213", # multi-line-summary-second-line
    "E731",  # lambda-assignment: lambdas are substential in maintenance of py2/3 codebase
    "ISC001",  # conflicts with ruff format command
    "RUF005",  # collection-literal-concatenation: syntax not compatible with py2
    "RUF012", # mutable-class-default: typing is not available for py2
    "UP037", # [*] Remove quotes from type annotation
    "UP035", # Import from `collections.abc` instead: `Sequence`
    "UP031", # Use format specifiers instead of percent format
    "SIM108", # Use ternary operator instead of...
    "PLR2004", # Magic value used in comparison
    "DJ001", # Avoid using `null=True` on string-based fields such as `CharField`

    "PLR0911",  # too many returns
    "PLR0912", # too many branches
    "PLR0913",  # too many arguments
    "PLR0915",  # too many statements
    "C901",  # too complex
    "PLC0415",  # `import` should be at the top-level of a file
    "ERA001",  # e2e comments..

    "N805",  #  First argument of a method should be named `self`
    "BLE001",  # Do not catch blind exception: `BaseException`
]

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[lint.per-file-ignores]
"tests/**.py" = ["S101", "PLR2004", "S", "SIM117", "D", "UP", "PLR0913", "ANN", "N999"]
"src/**/versioning/**.py" = ["N999", ]
"src/**/migrations/**.py" = ["E501", ]
"src/**/one_time_scripts/**.py" = ["T201", ]

[lint.isort]
known-first-party = ["hope", "extras", "e2e"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
force-sort-within-sections = true
force-to-top = ["import"]
