import json

from django.core.files.storage import default_storage
from django.urls import reverse

from rest_framework import status
from tests.unit.api.base import HOPEApiTestCase

from hct_mis_api.api.models import APIToken, Grant
from hct_mis_api.apps.account.fixtures import RoleFactory, UserFactory, UserRoleFactory
from hct_mis_api.apps.account.permissions import Permissions
from hct_mis_api.apps.dashboard.factories import BusinessAreaFactory, DashReportFactory


class DashReportAPITestCase(HOPEApiTestCase):
    databases = {"default"}
    user_permissions = []

    @classmethod
    def setUpTestData(cls) -> None:
        super().setUpTestData()

        cls.user = UserFactory(is_superuser=False, is_staff=False)
        cls.superuser = UserFactory(is_superuser=True, is_staff=True)
        cls.business_area = BusinessAreaFactory(name="Afghanistan")
        cls.other_business_area = BusinessAreaFactory(name="OtherArea")
        cls.dash_report = DashReportFactory(business_area=cls.business_area)

        cls.list_url = reverse("api:household-data", args=[cls.business_area.slug])
        cls.generate_report_url = reverse("api:generate-dashreport", args=[cls.business_area.slug])
        cls.report_file_path = cls.dash_report.file.path

    def setUp(self) -> None:
        self.client.force_login(self.user)

    def grant_permission(self, token: APIToken, permission: Grant) -> None:
        """Helper function to grant the required permission."""
        token.grants += [permission.name]
        token.save()

    def test_dash_report_contains_valid_json(self) -> None:
        """
        Test that the DashReport generated by the factory contains a valid JSON file.
        """
        self.assertTrue(default_storage.exists(self.report_file_path), "DashReport file does not exist")
        with open(self.report_file_path, "r") as report_file:
            try:
                report_data = json.load(report_file)
            except json.JSONDecodeError as e:
                self.fail(f"The DashReport JSON file is invalid: {e}")

        self.assertIsInstance(report_data, list, "The parsed JSON file is not a valid dictionary")
        self.assertGreater(len(report_data), 0, "The JSON list should contain at least one entry")

        first_entry = report_data[0]
        self.assertIsInstance(first_entry["payments"], list, "'payments' should be a list")
        self.assertIn("program", first_entry, "The 'program' field is missing in the first entry")

    def test_get_dash_report_json(self) -> None:
        """
        Test fetching the dash report and ensure it contains valid JSON when fetched via the API.
        """
        self.client.force_login(self.user)
        url = reverse("api:household-data", args=[self.business_area.slug])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        role = RoleFactory(
            name="Dashboard Viewer", subsystem="API", permissions=[Permissions.DASHBOARD_VIEW_COUNTRY.name]
        )
        UserRoleFactory(user=self.user, role=role, business_area=self.business_area)
        self.client.force_login(self.user)
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response["Content-Type"], "application/json")

        try:
            report_data = response.json()
        except json.JSONDecodeError as e:
            self.fail(f"Response JSON is invalid: {e}")

        self.assertIn(
            report_data[0]["id"],
            "a319f0ce-c263-48b0-80b8-a7b38a6105aa",
            "The 'households' field is missing from the response",
        )
        self.assertIsInstance(report_data, list, "should be a list")

    def test_get_dash_report_with_valid_permissions(self) -> None:
        """Test fetching a dash report with valid permissions."""
        role = RoleFactory(
            name="Dashboard Viewer", subsystem="API", permissions=[Permissions.DASHBOARD_VIEW_COUNTRY.name]
        )
        UserRoleFactory(user=self.user, role=role, business_area=self.business_area)
        self.client.force_login(self.user)
        response = self.client.get(self.list_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_get_dash_report_without_permissions(self) -> None:
        """Test fetching a dash report without permissions returns 403."""
        self.client.force_login(self.user)
        response = self.client.get(self.list_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_get_nonexistent_business_area(self) -> None:
        """Test fetching a dash report for a nonexistent business area."""
        url = reverse("api:household-data", args=["nonexistent-business"])
        self.client.force_login(self.user)

        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

    def test_generate_report_permission_denied(self) -> None:
        """Test generating a DashReport as a non-superuser returns 403."""
        self.client.force_login(self.user)
        response = self.client.post(self.generate_report_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertEqual(
            response.json()["detail"],
            "Only superusers or users with the correct permissions can create or update DashReports.",
        )

    def test_generate_report_as_superuser(self) -> None:
        """Test generating a DashReport as a superuser works."""
        self.client.force_login(self.superuser)
        response = self.client.post(self.generate_report_url)
        self.assertEqual(response.status_code, status.HTTP_202_ACCEPTED)
        self.assertIn("detail", response.json())
        self.assertEqual(response.json()["detail"], "DashReport generation task has been triggered.")

    def test_access_other_business_area_fails(self) -> None:
        """Test accessing a DashReport from a different business area fails."""
        other_report_url = reverse("api:household-data", args=[self.other_business_area.slug])
        self.client.force_login(self.user)
        self.grant_permission(self.token, Grant.API_READ_ONLY)
        self.client.credentials(HTTP_AUTHORIZATION="Token " + self.token.key)

        response = self.client.get(other_report_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertEqual(response.json()["detail"], "You do not have permission to view this dashboard.")
