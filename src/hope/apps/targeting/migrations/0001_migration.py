# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid

import concurrency.fields
import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
import model_utils.fields
from django.conf import settings
from django.db import migrations, models

import hope.apps.targeting.services.targeting_service
import hope.apps.utils.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("steficon", "0001_migration"),
        ("program", "0001_migration"),
        ("household", "0001_migration"),
        ("core", "0002_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="HouseholdSelection",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "vulnerability_score",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=3,
                        help_text="Written by Steficon",
                        max_digits=6,
                        null=True,
                    ),
                ),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("is_migration_handled", models.BooleanField(default=False)),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="selections",
                        to="household.household",
                    ),
                ),
            ],
            options={
                "verbose_name": "Household Selection",
            },
        ),
        migrations.CreateModel(
            name="TargetingCriteria",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "flag_exclude_if_active_adjudication_ticket",
                    models.BooleanField(
                        default=False,
                        help_text="Exclude households with individuals (members or collectors)"
                        " that have active adjudication ticket(s).",
                    ),
                ),
                (
                    "flag_exclude_if_on_sanction_list",
                    models.BooleanField(
                        default=False,
                        help_text="Exclude households with individuals (members or collectors) on sanction list.",
                    ),
                ),
                ("household_ids", models.TextField(blank=True)),
                ("individual_ids", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                hope.apps.targeting.services.targeting_service.TargetingCriteriaQueryingBase,
            ),
        ),
        migrations.CreateModel(
            name="TargetingCriteriaRule",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "targeting_criteria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="targeting.targetingcriteria",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                hope.apps.targeting.services.targeting_service.TargetingCriteriaRuleQueryingBase,
            ),
        ),
        migrations.CreateModel(
            name="TargetPopulation",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "name",
                    django.contrib.postgres.fields.citext.CICharField(
                        db_index=True,
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.MaxLengthValidator(255),
                            django.core.validators.RegexValidator(
                                "\\s{2,}",
                                "Double spaces characters are not allowed.",
                                code="double_spaces_characters_not_allowed",
                                inverse_match=True,
                            ),
                            django.core.validators.RegexValidator(
                                "(^\\s+)|(\\s+$)",
                                "Leading or trailing spaces characters are not allowed.",
                                code="leading_trailing_spaces_characters_not_allowed",
                                inverse_match=True,
                            ),
                            django.core.validators.ProhibitNullCharactersValidator(),
                        ],
                    ),
                ),
                (
                    "ca_id",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, max_length=255, null=True),
                ),
                (
                    "ca_hash_id",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, max_length=255, null=True),
                ),
                ("change_date", models.DateTimeField(blank=True, null=True)),
                ("finalized_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("OPEN", "Open"),
                            ("LOCKED", "Locked"),
                            ("STEFICON_WAIT", "Waiting for Rule Engine"),
                            ("STEFICON_RUN", "Rule Engine Running"),
                            ("STEFICON_COMPLETED", "Rule Engine Completed"),
                            ("STEFICON_ERROR", "Rule Engine Errored"),
                            ("PROCESSING", "Processing"),
                            ("SENDING_TO_CASH_ASSIST", "Sending to Cash Assist"),
                            ("READY_FOR_CASH_ASSIST", "Ready for cash assist"),
                            ("READY_FOR_PAYMENT_MODULE", "Ready for payment module"),
                            ("ASSIGNED", "Assigned"),
                        ],
                        db_index=True,
                        default="OPEN",
                        max_length=256,
                    ),
                ),
                (
                    "build_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("BUILDING", "Building"),
                            ("FAILED", "Failed"),
                            ("OK", "Ok"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=256,
                    ),
                ),
                ("built_at", models.DateTimeField(blank=True, null=True)),
                (
                    "sent_to_datahub",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="\n            Flag set when TP is processed by celery task\n            ",
                    ),
                ),
                ("steficon_applied_date", models.DateTimeField(blank=True, null=True)),
                (
                    "vulnerability_score_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Written by a tool such as Corticon.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "vulnerability_score_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Written by a tool such as Corticon.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                ("excluded_ids", models.TextField(blank=True)),
                ("exclusion_reason", models.TextField(blank=True)),
                (
                    "total_households_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "total_individuals_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "child_male_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "child_female_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "adult_male_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "adult_female_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="changed_target_populations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="target_populations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "finalized_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="finalized_target_populations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "households",
                    models.ManyToManyField(
                        related_name="target_populations",
                        through="targeting.HouseholdSelection",
                        to="household.Household",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        help_text="Set only when the target population moves from draft to\n"
                        "            candidate list frozen state (approved)",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="program.program",
                    ),
                ),
                (
                    "program_cycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="target_populations",
                        to="program.programcycle",
                    ),
                ),
                (
                    "steficon_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="target_populations",
                        to="steficon.rulecommit",
                    ),
                ),
                (
                    "storage_file",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.storagefile",
                    ),
                ),
                (
                    "targeting_criteria",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="target_population",
                        to="targeting.targetingcriteria",
                    ),
                ),
            ],
            options={
                "verbose_name": "Target Population",
            },
            bases=(models.Model, hope.apps.utils.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="TargetingIndividualRuleFilterBlock",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("target_only_hoh", models.BooleanField(default=False)),
                (
                    "targeting_criteria_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="individuals_filters_blocks",
                        to="targeting.targetingcriteriarule",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                hope.apps.targeting.services.targeting_service.TargetingIndividualRuleFilterBlockBase,
            ),
        ),
        migrations.CreateModel(
            name="TargetingIndividualBlockRuleFilter",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "comparison_method",
                    models.CharField(
                        choices=[
                            ("EQUALS", "Equals"),
                            ("NOT_EQUALS", "Not Equals"),
                            ("CONTAINS", "Contains"),
                            ("NOT_CONTAINS", "Does not contain"),
                            ("RANGE", "In between <>"),
                            ("NOT_IN_RANGE", "Not in between <>"),
                            ("GREATER_THAN", "Greater than"),
                            ("LESS_THAN", "Less than"),
                            ("IS_NULL", "Is null"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "flex_field_classification",
                    models.CharField(
                        choices=[
                            ("NOT_FLEX_FIELD", "Not Flex Field"),
                            ("FLEX_FIELD_BASIC", "Flex Field Basic"),
                            ("FLEX_FIELD_PDU", "Flex Field PDU"),
                        ],
                        default="NOT_FLEX_FIELD",
                        max_length=20,
                    ),
                ),
                ("field_name", models.CharField(max_length=50)),
                (
                    "arguments",
                    models.JSONField(help_text="\n            Array of arguments\n            "),
                ),
                ("round_number", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "individuals_filters_block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="individual_block_filters",
                        to="targeting.targetingindividualrulefilterblock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                hope.apps.targeting.services.targeting_service.TargetingCriteriaFilterBase,
            ),
        ),
        migrations.CreateModel(
            name="TargetingCriteriaRuleFilter",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "comparison_method",
                    models.CharField(
                        choices=[
                            ("EQUALS", "Equals"),
                            ("NOT_EQUALS", "Not Equals"),
                            ("CONTAINS", "Contains"),
                            ("NOT_CONTAINS", "Does not contain"),
                            ("RANGE", "In between <>"),
                            ("NOT_IN_RANGE", "Not in between <>"),
                            ("GREATER_THAN", "Greater than"),
                            ("LESS_THAN", "Less than"),
                            ("IS_NULL", "Is null"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "flex_field_classification",
                    models.CharField(
                        choices=[
                            ("NOT_FLEX_FIELD", "Not Flex Field"),
                            ("FLEX_FIELD_BASIC", "Flex Field Basic"),
                            ("FLEX_FIELD_PDU", "Flex Field PDU"),
                        ],
                        default="NOT_FLEX_FIELD",
                        max_length=20,
                    ),
                ),
                ("field_name", models.CharField(max_length=50)),
                (
                    "arguments",
                    models.JSONField(help_text="\n            Array of arguments\n            "),
                ),
                ("round_number", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "targeting_criteria_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="filters",
                        to="targeting.targetingcriteriarule",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                hope.apps.targeting.services.targeting_service.TargetingCriteriaFilterBase,
            ),
        ),
        migrations.AddField(
            model_name="householdselection",
            name="target_population",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="selections",
                to="targeting.targetpopulation",
            ),
        ),
        migrations.AddConstraint(
            model_name="targetpopulation",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("name", "business_area", "program", "is_removed"),
                name="target_population_unique_if_not_removed",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="householdselection",
            unique_together={("household", "target_population")},
        ),
    ]
