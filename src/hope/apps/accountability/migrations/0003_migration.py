# Generated by Django 3.2.25 on 2024-11-07 12:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("grievance", "0001_migration"),
        ("program", "0001_migration"),
        ("geo", "0001_migration"),
        ("targeting", "0001_migration"),
        ("accountability", "0002_migration"),
        ("household", "0001_migration"),
        ("core", "0002_migration"),
        ("registration_data", "0001_migration"),
    ]

    operations = [
        migrations.AddField(
            model_name="survey",
            name="recipients",
            field=models.ManyToManyField(blank=True, related_name="surveys", to="household.Household"),
        ),
        migrations.AddField(
            model_name="survey",
            name="target_population",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="surveys",
                to="targeting.targetpopulation",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="business_area",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
        ),
        migrations.AddField(
            model_name="message",
            name="copied_from",
            field=models.ForeignKey(
                blank=True,
                help_text="If this object was copied from another, this field will contain the object it was copied from.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="copied_to",
                to="accountability.message",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="messages",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Created by",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="households",
            field=models.ManyToManyField(blank=True, related_name="messages", to="household.Household"),
        ),
        migrations.AddField(
            model_name="message",
            name="program",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="program.program",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="registration_data_import",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="messages",
                to="registration_data.registrationdataimport",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="target_population",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="messages",
                to="targeting.targetpopulation",
            ),
        ),
        migrations.AddField(
            model_name="feedbackmessage",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedback_messages",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Created by",
            ),
        ),
        migrations.AddField(
            model_name="feedbackmessage",
            name="feedback",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="feedback_messages",
                to="accountability.feedback",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="admin2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="geo.area",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="business_area",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
        ),
        migrations.AddField(
            model_name="feedback",
            name="copied_from",
            field=models.ForeignKey(
                blank=True,
                help_text="If this object was copied from another, this field will contain the object it was copied from.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="copied_to",
                to="accountability.feedback",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedbacks",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Created by",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="household_lookup",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedbacks",
                to="household.household",
                verbose_name="Household lookup",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="individual_lookup",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedbacks",
                to="household.individual",
                verbose_name="Individual lookup",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="linked_grievance",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="feedback",
                to="grievance.grievanceticket",
                verbose_name="Linked grievance",
            ),
        ),
        migrations.AddField(
            model_name="feedback",
            name="program",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="program.program",
            ),
        ),
        # message
        migrations.RunSQL(
            sql="ALTER TABLE accountability_message ADD unicef_id_index SERIAL;",
            reverse_sql="ALTER TABLE accountability_message DROP unicef_id_index;",
        ),
        migrations.RunSQL(
            sql="""
        CREATE OR REPLACE FUNCTION create_accountability_communication_message_unicef_id() RETURNS trigger
            LANGUAGE plpgsql
            AS $$
        BEGIN
            NEW.unicef_id := format('MSG-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));
            return NEW;
        END
        $$;

        CREATE TRIGGER create_accountability_communication_message_unicef_id BEFORE INSERT ON accountability_message FOR EACH ROW EXECUTE PROCEDURE create_accountability_communication_message_unicef_id();
        """,
            reverse_sql="""
            DROP TRIGGER create_accountability_communication_message_unicef_id ON accountability_message;
            DROP FUNCTION create_accountability_communication_message_unicef_id();
            """,
        ),
        # survey
        migrations.RunSQL(
            sql="ALTER TABLE accountability_survey ADD unicef_id_index SERIAL;",
            reverse_sql="ALTER TABLE accountability_survey DROP unicef_id_index;",
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION create_accountability_survey_unicef_id() RETURNS trigger
                LANGUAGE plpgsql
                AS $$
            BEGIN
                NEW.unicef_id := format('SUR-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));
                return NEW;
            END
            $$;

            CREATE TRIGGER create_accountability_survey_unicef_id BEFORE INSERT ON accountability_survey FOR EACH ROW EXECUTE PROCEDURE create_accountability_survey_unicef_id();
            """,
            reverse_sql="""
                DROP TRIGGER create_accountability_survey_unicef_id ON accountability_survey;
                DROP FUNCTION create_accountability_survey_unicef_id();
                """,
        ),
        # feedback
        migrations.RunSQL(
            sql="ALTER TABLE accountability_feedback ADD unicef_id_index SERIAL;",
            reverse_sql="ALTER TABLE accountability_feedback DROP unicef_id_index;",
        ),
        migrations.RunSQL(
            sql="""
        CREATE OR REPLACE FUNCTION create_accountability_communication_feedback_unicef_id() RETURNS trigger
            LANGUAGE plpgsql
            AS $$
        BEGIN
            NEW.unicef_id := format('FED-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));
            return NEW;
        END
        $$;

        CREATE TRIGGER create_accountability_communication_feedback_unicef_id BEFORE INSERT ON accountability_feedback FOR EACH ROW EXECUTE PROCEDURE create_accountability_communication_feedback_unicef_id();
        """,
            reverse_sql="""
            DROP TRIGGER create_accountability_communication_feedback_unicef_id ON accountability_feedback;
            DROP FUNCTION create_accountability_communication_feedback_unicef_id();
            """,
        ),
    ]
