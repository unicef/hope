# Generated by Django 5.2.6 on 2025-09-24 09:22

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    atomic = False  # ensure CREATE COLLATION can run outside transaction

    dependencies = [
        ("household", "0025_migration"),
    ]

    operations = [
        migrations.RunSQL(
            """
            CREATE COLLATION IF NOT EXISTS "und-ci-det"
            (provider = icu, locale = 'und-u-ks-level2', deterministic = true);
            """,
            """
            DROP COLLATION IF EXISTS "und-ci-det";
            """,
        ),
        migrations.AlterField(
            model_name="household",
            name="address",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                help_text="Household address",
                max_length=1024,
            ),
        ),
        migrations.AlterField(
            model_name="household",
            name="program_registration_id",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                db_index=True,
                help_text="Beneficiary Program Registration id [sys]",
                max_length=100,
                null=True,
                unique=True,
                verbose_name="Beneficiary Program Registration Id",
            ),
        ),
        migrations.AlterField(
            model_name="individual",
            name="family_name",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                db_index=True,
                help_text="Last name of the Beneficiary",
                max_length=85,
            ),
        ),
        # --- DROP the trigger that depends on household_individual.full_name ---
        migrations.RunSQL(
            sql="""
            DROP TRIGGER IF EXISTS vector_column_trigger
            ON household_individual;
        """,
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="individual",
            name="full_name",
            field=models.CharField(
                db_collation="und-ci-det",
                db_index=True,
                help_text="Full Name of the Beneficiary",
                max_length=255,
                validators=[django.core.validators.MinLengthValidator(2)],
            ),
        ),
        # --- RECREATE the trigger ---
        migrations.RunSQL(
            sql="""
                CREATE TRIGGER vector_column_trigger
                    BEFORE INSERT OR
                UPDATE OF observed_disability, full_name, vector_column
                ON household_individual
                    FOR EACH ROW EXECUTE PROCEDURE
                    tsvector_update_trigger(
                    vector_column, 'pg_catalog.english', observed_disability, full_name
                    );
                """,
            reverse_sql="""
                    DROP TRIGGER IF EXISTS vector_column_trigger
                    ON household_individual;
                """,
        ),
        migrations.AlterField(
            model_name="individual",
            name="given_name",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                db_index=True,
                help_text="First name of the Beneficiary",
                max_length=85,
            ),
        ),
        migrations.AlterField(
            model_name="individual",
            name="middle_name",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                db_index=True,
                help_text="Middle name of the Beneficiary",
                max_length=85,
            ),
        ),
        migrations.AlterField(
            model_name="individual",
            name="program_registration_id",
            field=models.CharField(
                blank=True,
                db_collation="und-ci-det",
                help_text="Beneficiary Program Registration ID [sys]",
                max_length=100,
                null=True,
                verbose_name="Beneficiary Program Registration Id",
            ),
        ),
    ]
