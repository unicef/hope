# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid
from decimal import Decimal

import concurrency.fields
import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
import model_utils.fields
from django.conf import settings
from django.db import migrations, models

from hope.models.utils import AdminUrlMixin


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("geo", "0001_migration"),
        ("account", "0001_migration"),
        ("core", "0001_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="Program",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "name",
                    django.contrib.postgres.fields.citext.CICharField(
                        db_index=True,
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.MaxLengthValidator(255),
                            django.core.validators.RegexValidator(
                                "\\s{2,}",
                                "Double spaces characters are not allowed.",
                                code="double_spaces_characters_not_allowed",
                                inverse_match=True,
                            ),
                            django.core.validators.RegexValidator(
                                "(^\\s+)|(\\s+$)",
                                "Leading or trailing spaces characters are not allowed.",
                                code="leading_trailing_spaces_characters_not_allowed",
                                inverse_match=True,
                            ),
                            django.core.validators.ProhibitNullCharactersValidator(),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("DRAFT", "Draft"),
                            ("FINISHED", "Finished"),
                        ],
                        db_index=True,
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField(db_index=True)),
                ("end_date", models.DateField(blank=True, db_index=True, null=True)),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.MaxLengthValidator(255),
                        ],
                    ),
                ),
                (
                    "ca_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                (
                    "ca_hash_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=11,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "frequency_of_payments",
                    models.CharField(
                        choices=[("ONE_OFF", "One-off"), ("REGULAR", "Regular")],
                        max_length=50,
                    ),
                ),
                (
                    "sector",
                    models.CharField(
                        choices=[
                            ("CHILD_PROTECTION", "Child Protection"),
                            ("EDUCATION", "Education"),
                            ("HEALTH", "Health"),
                            ("MULTI_PURPOSE", "Multi Purpose"),
                            ("NUTRITION", "Nutrition"),
                            ("SOCIAL_POLICY", "Social Policy"),
                            ("WASH", "WASH"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FOR_PARTNERS", "For partners"),
                            ("UNICEF", "Unicef"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("cash_plus", models.BooleanField()),
                ("population_goal", models.PositiveIntegerField()),
                (
                    "administrative_areas_of_implementation",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.MaxLengthValidator(255),
                        ],
                    ),
                ),
                ("is_visible", models.BooleanField(default=True)),
                ("household_count", models.PositiveIntegerField(default=0)),
                ("individual_count", models.PositiveIntegerField(default=0)),
                (
                    "programme_code",
                    models.CharField(blank=True, max_length=4, null=True),
                ),
                (
                    "partner_access",
                    models.CharField(
                        choices=[
                            ("ALL_PARTNERS_ACCESS", "All partners access"),
                            ("NONE_PARTNERS_ACCESS", "None partners access"),
                            ("SELECTED_PARTNERS_ACCESS", "Selected partners access"),
                        ],
                        default="SELECTED_PARTNERS_ACCESS",
                        max_length=50,
                    ),
                ),
                (
                    "biometric_deduplication_enabled",
                    models.BooleanField(default=False, help_text="Enable Deduplication of Face Images"),
                ),
                ("deduplication_set_id", models.UUIDField(blank=True, null=True)),
                (
                    "admin_areas",
                    models.ManyToManyField(blank=True, related_name="programs", to="geo.Area"),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "data_collecting_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="programs",
                        to="core.datacollectingtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Programme",
                "permissions": [("enroll_beneficiaries", "Can enroll beneficiaries")],
            },
            bases=(models.Model, AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="ProgramPartnerThrough",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("full_area_access", models.BooleanField(default=False)),
                (
                    "areas",
                    models.ManyToManyField(
                        blank=True,
                        related_name="program_partner_through",
                        to="geo.Area",
                    ),
                ),
                (
                    "partner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="program_partner_through",
                        to="account.partner",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="program_partner_through",
                        to="program.program",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProgramCycle",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "unicef_id",
                    models.CharField(blank=True, db_index=True, max_length=255, null=True),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        default="Default Programme Cycle",
                        max_length=255,
                        null=True,
                        verbose_name="Title",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("FINISHED", "Finished"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cycles",
                        to="program.program",
                    ),
                ),
            ],
            options={
                "verbose_name": "Programme Cycle",
                "ordering": ["start_date"],
            },
            bases=(AdminUrlMixin, models.Model),
        ),
        migrations.AddField(
            model_name="program",
            name="partners",
            field=models.ManyToManyField(
                related_name="programs",
                through="program.ProgramPartnerThrough",
                to="account.Partner",
            ),
        ),
        migrations.AddConstraint(
            model_name="programpartnerthrough",
            constraint=models.UniqueConstraint(fields=("program", "partner"), name="unique_program_partner"),
        ),
        migrations.AddConstraint(
            model_name="programcycle",
            constraint=models.UniqueConstraint(
                fields=("title", "program"),
                name="program_cycle_title_unique_per_program",
            ),
        ),
        migrations.AddConstraint(
            model_name="program",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("name", "business_area", "is_removed"),
                name="unique_for_program_if_not_removed",
            ),
        ),
        migrations.AddConstraint(
            model_name="program",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("business_area", "programme_code"),
                name="unique_for_business_area_and_programme_code_if_not_removed",
            ),
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION program_cycle_fill_unicef_id_per_business_area_seq() RETURNS trigger
                LANGUAGE plpgsql
                AS $$
                DECLARE
                    businessAreaID varchar;
                    businessAreaCode varchar;
                BEGIN
                    SELECT INTO businessAreaID p.business_area_id FROM program_program p WHERE p.id = NEW.program_id;
                    SELECT INTO businessAreaCode ba.code FROM core_businessarea ba WHERE ba.id = businessAreaID::uuid;
                    NEW.unicef_id := format('PC-%s-%s-%s', trim(businessAreaCode), to_char(NEW.created_at, 'yy'), trim(replace(to_char(nextval('program_cycle_business_area_seq_' || translate(businessAreaID::text, '-','_')),'000000'),',','.')));
                    RETURN NEW;
                END;
                $$;
            """,
        ),
        migrations.RunSQL(
            sql="CREATE TRIGGER program_cycle_fill_unicef_id_per_business_area_seq BEFORE INSERT ON program_programcycle FOR EACH ROW EXECUTE PROCEDURE program_cycle_fill_unicef_id_per_business_area_seq();",  # noqa
        ),
    ]
