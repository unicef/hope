# Generated by Django 3.2.25 on 2025-08-07 12:52

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def migrate_celery_task_results_ids(apps, schema_editor):
    """
    Migrate from curr_async_result_id to celery_tasks_results_ids,
    using the specific task name for each model in bulk.
    """
    # Migrate PeriodicDataUpdateXlsxTemplate
    PeriodicDataUpdateXlsxTemplate = apps.get_model("periodic_data_update", "PeriodicDataUpdateXlsxTemplate")
    templates_to_update = []
    for obj in PeriodicDataUpdateXlsxTemplate.objects.filter(curr_async_result_id__isnull=False):
        if obj.curr_async_result_id:
            obj.celery_tasks_results_ids = {"export": obj.curr_async_result_id}
            templates_to_update.append(obj)
    if templates_to_update:
        PeriodicDataUpdateXlsxTemplate.objects.bulk_update(templates_to_update, ["celery_tasks_results_ids"])

    # Migrate PeriodicDataUpdateXlsxUpload
    PeriodicDataUpdateXlsxUpload = apps.get_model("periodic_data_update", "PeriodicDataUpdateXlsxUpload")
    uploads_to_update = []
    for obj in PeriodicDataUpdateXlsxUpload.objects.filter(curr_async_result_id__isnull=False):
        if obj.curr_async_result_id:
            obj.celery_tasks_results_ids = {"import": obj.curr_async_result_id}
            uploads_to_update.append(obj)
    if uploads_to_update:
        PeriodicDataUpdateXlsxUpload.objects.bulk_update(uploads_to_update, ["celery_tasks_results_ids"])


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("program", "0007_migration"),
        ("core", "0010_migration"),
        ("periodic_data_update", "0001_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="PeriodicDataUpdateOnlineEdit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("celery_tasks_results_ids", models.JSONField(blank=True, default=dict, help_text="Current (active) AsyncResult ids for celery tasks.")),
                ("name", models.CharField(max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(255), django.core.validators.RegexValidator("\\s{2,}", "Double spaces characters are not allowed.", code="double_spaces_characters_not_allowed", inverse_match=True), django.core.validators.RegexValidator("(^\\s+)|(\\s+$)", "Leading or trailing spaces characters are not allowed.", code="leading_trailing_spaces_characters_not_allowed", inverse_match=True), django.core.validators.ProhibitNullCharactersValidator()])),
                ("status", models.CharField(choices=[("NEW", "New"), ("READY", "Ready"), ("APPROVED", "Approved"), ("NOT_SCHEDULED_MERGE", "Not scheduled merge"), ("MERGED", "Merged"), ("PENDING_CREATE", "Pending create"), ("NOT_SCHEDULED_CREATE", "Not scheduled create"), ("CREATING", "Creating"), ("FAILED_CREATE", "Failed create"), ("CANCELED_CREATE", "Canceled create"), ("PENDING_MERGE", "Pending merge"), ("MERGING", "Processing"), ("FAILED_MERGE", "Failed merge"), ("CANCELED_MERGE", "Canceled merge")], default="NEW", max_length=20)),
                ("number_of_records", models.PositiveIntegerField(blank=True, null=True)),
                ("authorized_users", models.ManyToManyField(blank=True, help_text="Users who are authorized to perform actions on this periodic data update", related_name="authorized_pdu_online_edits", to=settings.AUTH_USER_MODEL)),
                ("business_area", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="pdu_online_edits", to="core.businessarea")),
                ("created_by", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="pdu_online_edits_created", to=settings.AUTH_USER_MODEL)),
                ("program", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="pdu_online_edits", to="program.program")),
            ],
        ),
        migrations.RenameModel(
            old_name="PeriodicDataUpdateTemplate",
            new_name="PeriodicDataUpdateXlsxTemplate",
        ),
        migrations.RenameModel(
            old_name="PeriodicDataUpdateUpload",
            new_name="PeriodicDataUpdateXlsxUpload",
        ),
        migrations.AddField(
            model_name="periodicdataupdatexlsxtemplate",
            name="name",
            field=models.CharField(max_length=255, null=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(255), django.core.validators.RegexValidator("\\s{2,}", "Double spaces characters are not allowed.", code="double_spaces_characters_not_allowed", inverse_match=True), django.core.validators.RegexValidator("(^\\s+)|(\\s+$)", "Leading or trailing spaces characters are not allowed.", code="leading_trailing_spaces_characters_not_allowed", inverse_match=True), django.core.validators.ProhibitNullCharactersValidator()]),
        ),
        migrations.AddConstraint(
            model_name="periodicdataupdatexlsxtemplate",
            constraint=models.UniqueConstraint(fields=("name", "program"), name="pdu_xlsx_template_name_unique_per_program"),
        ),
        migrations.AddConstraint(
            model_name="periodicdataupdateonlineedit",
            constraint=models.UniqueConstraint(fields=("name", "program"), name="pdu_online_name_unique_per_program"),
        ),
        migrations.AddField(
            model_name="periodicdataupdatexlsxtemplate",
            name="celery_tasks_results_ids",
            field=models.JSONField(blank=True, default=dict, help_text="Current (active) AsyncResult ids for celery tasks."),
        ),
        migrations.AddField(
            model_name="periodicdataupdatexlsxupload",
            name="celery_tasks_results_ids",
            field=models.JSONField(blank=True, default=dict, help_text="Current (active) AsyncResult ids for celery tasks."),
        ),
        migrations.RunPython(migrate_celery_task_results_ids, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="periodicdataupdatexlsxtemplate",
            name="curr_async_result_id",
        ),
        migrations.RemoveField(
            model_name="periodicdataupdatexlsxupload",
            name="curr_async_result_id",
        ),
        migrations.AlterField(
            model_name="periodicdataupdatexlsxtemplate",
            name="business_area",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="pdu_xlsx_templates",
                                    to="core.businessarea"),
        ),
        migrations.AlterField(
            model_name="periodicdataupdatexlsxtemplate",
            name="created_by",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name="pdu_xlsx_templates_created", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name="periodicdataupdatexlsxtemplate",
            name="program",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="pdu_xlsx_templates",
                                    to="program.program"),
        ),
        migrations.AlterField(
            model_name="periodicdataupdatexlsxupload",
            name="created_by",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    related_name="pdu_uploads", to=settings.AUTH_USER_MODEL),
        ),
    ]

