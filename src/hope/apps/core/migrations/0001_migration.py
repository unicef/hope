# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import mptt.fields
from django.conf import settings
from django.db import migrations, models

from hope.models.flexible_attribute import label_contains_english_en_validator


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BusinessArea",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("code", models.CharField(max_length=10, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("long_name", models.CharField(max_length=255)),
                ("region_code", models.CharField(max_length=8)),
                ("region_name", models.CharField(max_length=8)),
                (
                    "kobo_username",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("kobo_token", models.CharField(blank=True, max_length=255, null=True)),
                ("kobo_url", models.URLField(blank=True, max_length=255, null=True)),
                ("rapid_pro_host", models.URLField(blank=True, null=True)),
                (
                    "rapid_pro_payment_verification_token",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                (
                    "rapid_pro_messages_token",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                (
                    "rapid_pro_survey_token",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                ("slug", models.CharField(db_index=True, max_length=250, unique=True)),
                ("custom_fields", models.JSONField(blank=True, default=dict)),
                ("has_data_sharing_agreement", models.BooleanField(default=False)),
                ("is_split", models.BooleanField(default=False)),
                ("postpone_deduplication", models.BooleanField(default=False)),
                (
                    "deduplication_duplicate_score",
                    models.FloatField(
                        default=6.0,
                        help_text="Results equal or above this score are considered duplicates",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "deduplication_possible_duplicate_score",
                    models.FloatField(
                        default=6.0,
                        help_text="Results equal or above this score are considered possible duplicates (needs adjudication) must be lower than deduplication_duplicate_score",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "deduplication_batch_duplicates_percentage",
                    models.IntegerField(
                        default=50,
                        help_text="If percentage of duplicates is higher or equal to this setting, deduplication is aborted",
                    ),
                ),
                (
                    "deduplication_batch_duplicates_allowed",
                    models.IntegerField(
                        default=5,
                        help_text="If amount of duplicates for single individual exceeds this limit deduplication is aborted",
                    ),
                ),
                (
                    "deduplication_golden_record_duplicates_percentage",
                    models.IntegerField(
                        default=50,
                        help_text="If percentage of duplicates is higher or equal to this setting,"
                        " deduplication is aborted",
                    ),
                ),
                (
                    "deduplication_golden_record_duplicates_allowed",
                    models.IntegerField(
                        default=5,
                        help_text="If amount of duplicates for single individual exceeds this limit deduplication"
                        " is aborted",
                    ),
                ),
                (
                    "screen_beneficiary",
                    models.BooleanField(
                        default=False,
                        help_text="Enable screen beneficiary against sanction list",
                    ),
                ),
                ("deduplication_ignore_withdraw", models.BooleanField(default=False)),
                (
                    "biometric_deduplication_threshold",
                    models.FloatField(
                        default=0.0,
                        help_text="Threshold for Face Image Deduplication",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("is_payment_plan_applicable", models.BooleanField(default=False)),
                ("is_accountability_applicable", models.BooleanField(default=False)),
                ("active", models.BooleanField(default=False)),
                (
                    "enable_email_notification",
                    models.BooleanField(
                        default=True,
                        verbose_name="Automatic Email notifications enabled",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "permissions": (
                    ("can_split", "Can split BusinessArea"),
                    ("can_send_doap", "Can send DOAP matrix"),
                    ("can_reset_doap", "Can force sync DOAP matrix"),
                    ("can_export_doap", "Can export DOAP matrix"),
                ),
            },
        ),
        migrations.CreateModel(
            name="BusinessAreaPartnerThrough",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name="CountryCodeMap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ca_code", models.CharField(max_length=5, unique=True)),
            ],
            options={
                "ordering": ("country",),
            },
        ),
        migrations.CreateModel(
            name="DataCollectingType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=32)),
                ("code", models.CharField(max_length=32)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("STANDARD", "Standard"),
                            ("SOCIAL", "Social Workers"),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "deprecated",
                    models.BooleanField(
                        default=False,
                        help_text="Cannot be used in new programs, totally hidden in UI, only admin have access",
                    ),
                ),
                ("individual_filters_available", models.BooleanField(default=False)),
                ("household_filters_available", models.BooleanField(default=True)),
                ("recalculate_composition", models.BooleanField(default=False)),
                ("weight", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "ordering": ("-weight",),
            },
        ),
        migrations.CreateModel(
            name="FileTemp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("object_id", models.CharField(max_length=120, null=True)),
                ("file", models.FileField(upload_to="")),
                ("was_downloaded", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlexibleAttribute",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("DATE", "Date"),
                            ("DECIMAL", "Decimal"),
                            ("IMAGE", "Image"),
                            ("INTEGER", "Integer"),
                            ("GEOPOINT", "Geopoint"),
                            ("SELECT_ONE", "Select One"),
                            ("SELECT_MANY", "Select Many"),
                            ("STRING", "String"),
                            ("PDU", "PDU"),
                        ],
                        max_length=16,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("required", models.BooleanField(default=False)),
                (
                    "label",
                    models.JSONField(
                        default=dict,
                        validators=[label_contains_english_en_validator],
                    ),
                ),
                ("hint", models.JSONField(default=dict)),
                (
                    "associated_with",
                    models.SmallIntegerField(choices=[(0, "Household"), (1, "Individual")]),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MigrationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("is_running", models.BooleanField()),
            ],
            options={
                "verbose_name_plural": "Migration Status",
            },
        ),
        migrations.CreateModel(
            name="PeriodicFieldData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "subtype",
                    models.CharField(
                        choices=[
                            ("DATE", "Date"),
                            ("DECIMAL", "Number"),
                            ("STRING", "Text"),
                            ("BOOL", "Boolean (true/false)"),
                        ],
                        max_length=16,
                    ),
                ),
                ("number_of_rounds", models.IntegerField()),
                (
                    "rounds_names",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
            ],
            options={
                "verbose_name": "Periodic Field Data",
                "verbose_name_plural": "Periodic Fields Data",
            },
        ),
        migrations.CreateModel(
            name="XLSXKoboTemplate",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("file_name", models.CharField(max_length=255)),
                ("file", models.FileField(upload_to="")),
                ("error_description", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("CONNECTION_FAILED", "Connection failed"),
                            ("PROCESSING", "Processing"),
                            ("SUCCESSFUL", "Successful"),
                            ("UNSUCCESSFUL", "Unsuccessful"),
                            ("UPLOADED", "Uploaded"),
                        ],
                        max_length=200,
                    ),
                ),
                ("template_id", models.CharField(blank=True, max_length=200)),
                (
                    "first_connection_failed_time",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="StorageFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("file", models.FileField(upload_to="files")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Not processed", "Not processed"),
                            ("Processing", "Processing"),
                            ("Finished", "Finished"),
                            ("Failed", "Failed"),
                        ],
                        default="Not processed",
                        max_length=25,
                    ),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.businessarea",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlexibleAttributeGroup",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_removed", models.BooleanField(default=False)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("label", models.JSONField(default=dict)),
                ("required", models.BooleanField(default=False)),
                ("repeatable", models.BooleanField(default=False)),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.flexibleattributegroup",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FlexibleAttributeChoice",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("list_name", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("label", models.JSONField(default=dict)),
                (
                    "flex_attributes",
                    models.ManyToManyField(related_name="choices", to="core.FlexibleAttribute"),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.AddField(
            model_name="flexibleattribute",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="flex_attributes",
                to="core.flexibleattributegroup",
            ),
        ),
        migrations.AddField(
            model_name="flexibleattribute",
            name="pdu_data",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="flex_field",
                to="core.periodicfielddata",
            ),
        ),
    ]
