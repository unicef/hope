# Generated by Django 3.2.25 on 2025-08-11 09:32

import django.contrib.postgres.fields
from django.db import migrations, models


def populate_rounds_covered(apps, schema_editor):  # pragma: no cover
    Program = apps.get_model("program", "Program")
    PDUXlsxTemplate = apps.get_model("periodic_data_update", "PDUXlsxTemplate")
    FlexibleAttribute = apps.get_model("core", "FlexibleAttribute")
    PeriodicFieldData = apps.get_model("core", "PeriodicFieldData")

    pdu_data_updates = {}

    for program in Program.objects.filter(pdu_xlsx_templates__isnull=False).distinct().iterator():
        pdu_fields = FlexibleAttribute.objects.filter(program=program, pdu_data__isnull=False).select_related(
            "pdu_data"
        )

        field_name_to_pdu_map = {attr.name: attr.pdu_data.id for attr in pdu_fields}

        if not field_name_to_pdu_map:
            continue

        templates = PDUXlsxTemplate.objects.filter(program=program)
        for template in templates.iterator():
            for item in template.rounds_data:
                field_name = item.get("field")
                round_used_in_template = item.get("round", 0)

                pdu_id = field_name_to_pdu_map.get(field_name)
                if pdu_id:
                    pdu_data_updates[pdu_id] = max(
                        round_used_in_template,
                        pdu_data_updates.get(pdu_id, 0),
                    )

    if pdu_data_updates:
        pdu_to_update = []
        pdu_objects = PeriodicFieldData.objects.filter(id__in=pdu_data_updates.keys())
        for pdu in pdu_objects:
            pdu.rounds_covered = pdu_data_updates[pdu.id]
            pdu_to_update.append(pdu)

        if pdu_to_update:
            PeriodicFieldData.objects.bulk_update(pdu_to_update, ["rounds_covered"])


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0011_migration"),
        ("periodic_data_update", "0002_migration"),
    ]

    operations = [
        migrations.AlterField(
            model_name="periodicfielddata",
            name="rounds_names",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=255), default=list, size=None
            ),
        ),
        migrations.AddField(
            model_name="periodicfielddata",
            name="rounds_covered",
            field=models.PositiveSmallIntegerField(
                blank=True,
                default=0,
                help_text="Number of rounds already used in templates and cannot be used in template creation again.",
            ),
        ),
        migrations.RunPython(populate_rounds_covered, reverse_code=migrations.RunPython.noop),
    ]
