# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid
from decimal import Decimal

import concurrency.fields
import django.contrib.postgres.fields
import django.contrib.postgres.validators
import django.core.validators
import django.db.models.deletion
import django_fsm
import model_utils.fields
import multiselectfield.db.fields
import psycopg2.extras
from django.conf import settings
from django.db import migrations

import hope.apps.payment.fields
import hope.apps.payment.models
import hope.apps.payment.validators
from hope.models.financial_service_provider_xlsx_template
from hope.models.utils


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("steficon", "0001_migration"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("program", "0001_migration"),
        ("household", "0002_migration"),
        ("targeting", "0001_migration"),
        ("core", "0002_migration"),
    ]

    operations = [
        migrations.CreateModel(
            name="CashPlan",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                ("status_date", models.DateTimeField()),
                (
                    "start_date",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(blank=True, decimal_places=8, max_digits=14, null=True),
                ),
                (
                    "total_entitled_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_delivered_quantity",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_delivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_undelivered_quantity",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_undelivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("ca_id", models.CharField(db_index=True, max_length=255, null=True)),
                ("ca_hash_id", models.UUIDField(null=True, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Distribution Completed", "Distribution Completed"),
                            (
                                "Distribution Completed with Errors",
                                "Distribution Completed with Errors",
                            ),
                            ("Transaction Completed", "Transaction Completed"),
                            (
                                "Transaction Completed with Errors",
                                "Transaction Completed with Errors",
                            ),
                        ],
                        db_index=True,
                        max_length=255,
                    ),
                ),
                ("distribution_level", models.CharField(max_length=255)),
                ("dispersion_date", models.DateTimeField()),
                ("coverage_duration", models.PositiveIntegerField()),
                ("coverage_unit", models.CharField(max_length=255)),
                ("comments", models.CharField(max_length=255, null=True)),
                (
                    "delivery_type",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("Mobile Money", "Mobile Money"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                            ("ATM Card", "ATM Card"),
                            ("Cash over the counter", "Cash over the counter"),
                            (
                                "Transfer to Digital Wallet",
                                "Transfer to Digital Wallet",
                            ),
                        ],
                        db_index=True,
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "assistance_measurement",
                    models.CharField(db_index=True, max_length=255),
                ),
                ("assistance_through", models.CharField(db_index=True, max_length=255)),
                ("vision_id", models.CharField(max_length=255, null=True)),
                ("funds_commitment", models.CharField(max_length=255, null=True)),
                ("down_payment", models.CharField(max_length=255, null=True)),
                ("validation_alerts_count", models.IntegerField()),
                ("total_persons_covered", models.IntegerField(db_index=True)),
                ("total_persons_covered_revised", models.IntegerField(db_index=True)),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="program.program",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cash Plan",
                "ordering": ["created_at"],
            },
            bases=(models.models.AdminUrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DeliveryMechanism",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "payment_gateway_id",
                    models.CharField(max_length=255, null=True, unique=True),
                ),
                ("code", models.CharField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "optional_fields",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "required_fields",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "unique_fields",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "transfer_type",
                    models.CharField(
                        choices=[
                            ("CASH", "Cash"),
                            ("VOUCHER", "Voucher"),
                            ("DIGITAL", "Digital"),
                        ],
                        default="CASH",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "Delivery Mechanism",
                "verbose_name_plural": "Delivery Mechanisms",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="FinancialServiceProvider",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("vision_vendor_number", models.CharField(max_length=100, unique=True)),
                (
                    "delivery_mechanisms_choices",
                    models.utils.HorizontalChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                (
                                    "Cardless cash withdrawal",
                                    "Cardless cash withdrawal",
                                ),
                                ("Cash", "Cash"),
                                ("Cash by FSP", "Cash by FSP"),
                                ("Cheque", "Cheque"),
                                ("Deposit to Card", "Deposit to Card"),
                                ("Mobile Money", "Mobile Money"),
                                ("Pre-paid card", "Pre-paid card"),
                                ("Referral", "Referral"),
                                ("Transfer", "Transfer"),
                                ("Transfer to Account", "Transfer to Account"),
                                ("Voucher", "Voucher"),
                                ("ATM Card", "ATM Card"),
                                ("Cash over the counter", "Cash over the counter"),
                                (
                                    "Transfer to Digital Wallet",
                                    "Transfer to Digital Wallet",
                                ),
                            ],
                            max_length=32,
                        ),
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "distribution_limit",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        help_text="The maximum amount of money in USD that can be distributed or unlimited if null",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "communication_channel",
                    models.CharField(
                        choices=[("API", "API"), ("SFTP", "SFTP"), ("XLSX", "XLSX")],
                        db_index=True,
                        max_length=6,
                    ),
                ),
                (
                    "data_transfer_configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the data transfer mechanism",
                        null=True,
                    ),
                ),
                ("payment_gateway_id", models.CharField(max_length=255, null=True)),
                (
                    "allowed_business_areas",
                    models.ManyToManyField(blank=True, to="core.BusinessArea"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_financial_service_providers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "delivery_mechanisms",
                    models.ManyToManyField(to="payment.DeliveryMechanism"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FinancialServiceProviderXlsxTemplate",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=120, verbose_name="Name")),
                (
                    "columns",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("payment_id", "Payment ID"),
                            ("household_id", "Household ID"),
                            ("individual_id", "Individual ID"),
                            ("household_size", "Household Size"),
                            ("collector_name", "Collector Name"),
                            (
                                "alternate_collector_full_name",
                                "Alternate collector Full Name",
                            ),
                            (
                                "alternate_collector_given_name",
                                "Alternate collector Given Name",
                            ),
                            (
                                "alternate_collector_middle_name",
                                "Alternate collector Middle Name",
                            ),
                            (
                                "alternate_collector_phone_no",
                                "Alternate collector phone number",
                            ),
                            (
                                "alternate_collector_document_numbers",
                                "Alternate collector Document numbers",
                            ),
                            ("alternate_collector_sex", "Alternate collector Gender"),
                            ("payment_channel", "Payment Channel"),
                            ("fsp_name", "FSP Name"),
                            ("currency", "Currency"),
                            ("entitlement_quantity", "Entitlement Quantity"),
                            ("entitlement_quantity_usd", "Entitlement Quantity USD"),
                            ("delivered_quantity", "Delivered Quantity"),
                            ("delivery_date", "Delivery Date"),
                            ("reference_id", "Reference id"),
                            (
                                "reason_for_unsuccessful_payment",
                                "Reason for unsuccessful payment",
                            ),
                            ("order_number", "Order Number"),
                            ("token_number", "Token Number"),
                            ("additional_collector_name", "Additional Collector Name"),
                            ("additional_document_type", "Additional Document Type"),
                            (
                                "additional_document_number",
                                "Additional Document Number",
                            ),
                            ("registration_token", "Registration Token"),
                            ("status", "Status"),
                            (
                                "transaction_status_blockchain_link",
                                "Transaction Status on the Blockchain",
                            ),
                        ],
                        default=[
                            "payment_id",
                            "household_id",
                            "individual_id",
                            "household_size",
                            "collector_name",
                            "alternate_collector_full_name",
                            "alternate_collector_given_name",
                            "alternate_collector_middle_name",
                            "alternate_collector_phone_no",
                            "alternate_collector_document_numbers",
                            "alternate_collector_sex",
                            "payment_channel",
                            "fsp_name",
                            "currency",
                            "entitlement_quantity",
                            "entitlement_quantity_usd",
                            "delivered_quantity",
                            "delivery_date",
                            "reference_id",
                            "reason_for_unsuccessful_payment",
                            "order_number",
                            "token_number",
                            "additional_collector_name",
                            "additional_document_type",
                            "additional_document_number",
                            "registration_token",
                            "status",
                            "transaction_status_blockchain_link",
                        ],
                        help_text="Select the columns to include in the report",
                        max_length=1000,
                        verbose_name="Columns",
                    ),
                ),
                (
                    "core_fields",
                    hope.apps.payment.fields.DynamicChoiceArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "flex_fields",
                    models.financial_service_provider_xlsx_template.FlexFieldArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_financial_service_provider_xlsx_templates",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "unicef_id",
                    models.CharField(blank=True, db_index=True, max_length=255, null=True),
                ),
                (
                    "signature_hash",
                    models.CharField(blank=True, editable=False, max_length=40),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Distribution Successful", "Distribution Successful"),
                            ("Not Distributed", "Not Distributed"),
                            ("Transaction Successful", "Transaction Successful"),
                            ("Transaction Erroneous", "Transaction Erroneous"),
                            ("Force failed", "Force failed"),
                            ("Partially Distributed", "Partially Distributed"),
                            ("Pending", "Pending"),
                            ("Sent to Payment Gateway", "Sent to Payment Gateway"),
                            ("Sent to FSP", "Sent to FSP"),
                            ("Manually Cancelled", "Manually Cancelled"),
                        ],
                        default="Pending",
                        max_length=255,
                    ),
                ),
                ("status_date", models.DateTimeField()),
                (
                    "delivery_type_choice",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("Mobile Money", "Mobile Money"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                            ("ATM Card", "ATM Card"),
                            ("Cash over the counter", "Cash over the counter"),
                            (
                                "Transfer to Digital Wallet",
                                "Transfer to Digital Wallet",
                            ),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("currency", models.CharField(max_length=4)),
                (
                    "entitlement_quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "entitlement_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "delivered_quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "delivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                ("delivery_date", models.DateTimeField(blank=True, null=True)),
                (
                    "transaction_reference_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "transaction_status_blockchain_link",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("conflicted", models.BooleanField(default=False)),
                ("excluded", models.BooleanField(default=False)),
                ("entitlement_date", models.DateTimeField(blank=True, null=True)),
                ("is_follow_up", models.BooleanField(default=False)),
                (
                    "reason_for_unsuccessful_payment",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "order_number",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100000000),
                            django.core.validators.MaxValueValidator(999999999),
                            hope.apps.payment.validators.payment_token_and_order_number_validator,
                        ],
                    ),
                ),
                (
                    "token_number",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000000),
                            django.core.validators.MaxValueValidator(9999999),
                            hope.apps.payment.validators.payment_token_and_order_number_validator,
                        ],
                    ),
                ),
                (
                    "additional_collector_name",
                    models.CharField(
                        blank=True,
                        help_text="Use this field for reconciliation data when funds are collected by someone other than the designated collector or the alternate collector",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "additional_document_type",
                    models.CharField(
                        blank=True,
                        help_text="Use this field for reconciliation data",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "additional_document_number",
                    models.CharField(
                        blank=True,
                        help_text="Use this field for reconciliation data",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "fsp_auth_code",
                    models.CharField(blank=True, help_text="FSP Auth Code", max_length=128, null=True),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "collector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collector_payments",
                        to="household.individual",
                    ),
                ),
                (
                    "delivery_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.deliverymechanism",
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="payment.financialserviceprovider",
                    ),
                ),
                (
                    "head_of_household",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="household.individual",
                    ),
                ),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="household.household",
                    ),
                ),
            ],
            bases=(models.models.AdminUrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PaymentPlan",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "unicef_id",
                    models.CharField(blank=True, db_index=True, max_length=255, null=True),
                ),
                ("status_date", models.DateTimeField()),
                (
                    "start_date",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(blank=True, decimal_places=8, max_digits=14, null=True),
                ),
                (
                    "total_entitled_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_delivered_quantity",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_delivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_undelivered_quantity",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "total_undelivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal(0))],
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMField(
                        choices=[
                            ("PREPARING", "Preparing"),
                            ("OPEN", "Open"),
                            ("LOCKED", "Locked"),
                            ("LOCKED_FSP", "Locked FSP"),
                            ("IN_APPROVAL", "In Approval"),
                            ("IN_AUTHORIZATION", "In Authorization"),
                            ("IN_REVIEW", "In Review"),
                            ("ACCEPTED", "Accepted"),
                            ("FINISHED", "Finished"),
                        ],
                        db_index=True,
                        default="OPEN",
                        max_length=50,
                    ),
                ),
                (
                    "background_action_status",
                    django_fsm.FSMField(
                        blank=True,
                        choices=[
                            ("RULE_ENGINE_RUN", "Rule Engine Running"),
                            ("RULE_ENGINE_ERROR", "Rule Engine Errored"),
                            ("XLSX_EXPORTING", "Exporting XLSX file"),
                            ("XLSX_EXPORT_ERROR", "Export XLSX file Error"),
                            ("XLSX_IMPORT_ERROR", "Import XLSX file Error"),
                            (
                                "XLSX_IMPORTING_ENTITLEMENTS",
                                "Importing Entitlements XLSX file",
                            ),
                            (
                                "XLSX_IMPORTING_RECONCILIATION",
                                "Importing Reconciliation XLSX file",
                            ),
                            ("EXCLUDE_BENEFICIARIES", "Exclude Beneficiaries Running"),
                            (
                                "EXCLUDE_BENEFICIARIES_ERROR",
                                "Exclude Beneficiaries Error",
                            ),
                            ("SEND_TO_PAYMENT_GATEWAY", "Sending to Payment Gateway"),
                            (
                                "SEND_TO_PAYMENT_GATEWAY_ERROR",
                                "Send to Payment Gateway Error",
                            ),
                        ],
                        db_index=True,
                        default=None,
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("", "None"),
                            ("AED", "United Arab Emirates dirham"),
                            ("AFN", "Afghan afghani"),
                            ("ALL", "Albanian lek"),
                            ("AMD", "Armenian dram"),
                            ("ANG", "Netherlands Antillean guilder"),
                            ("AOA", "Angolan kwanza"),
                            ("ARS", "Argentine peso"),
                            ("AUD", "Australian dollar"),
                            ("AWG", "Aruban florin"),
                            ("AZN", "Azerbaijani manat"),
                            ("BAM", "Bosnia and Herzegovina convertible mark"),
                            ("BBD", "Barbados dollar"),
                            ("BDT", "Bangladeshi taka"),
                            ("BGN", "Bulgarian lev"),
                            ("BHD", "Bahraini dinar"),
                            ("BIF", "Burundian franc"),
                            ("BMD", "Bermudian dollar"),
                            ("BND", "Brunei dollar"),
                            ("BOB", "Boliviano"),
                            ("BOV", "Bolivian Mvdol (funds code)"),
                            ("BRL", "Brazilian real"),
                            ("BSD", "Bahamian dollar"),
                            ("BTN", "Bhutanese ngultrum"),
                            ("BWP", "Botswana pula"),
                            ("BYN", "Belarusian ruble"),
                            ("BZD", "Belize dollar"),
                            ("CAD", "Canadian dollar"),
                            ("CDF", "Congolese franc"),
                            ("CHF", "Swiss franc"),
                            ("CLP", "Chilean peso"),
                            ("CNY", "Chinese yuan"),
                            ("COP", "Colombian peso"),
                            ("CRC", "Costa Rican colon"),
                            ("CUC", "Cuban convertible peso"),
                            ("CUP", "Cuban peso"),
                            ("CVE", "Cape Verdean escudo"),
                            ("CZK", "Czech koruna"),
                            ("DJF", "Djiboutian franc"),
                            ("DKK", "Danish krone"),
                            ("DOP", "Dominican peso"),
                            ("DZD", "Algerian dinar"),
                            ("EGP", "Egyptian pound"),
                            ("ERN", "Eritrean nakfa"),
                            ("ETB", "Ethiopian birr"),
                            ("EUR", "Euro"),
                            ("FJD", "Fiji dollar"),
                            ("FKP", "Falkland Islands pound"),
                            ("GBP", "Pound sterling"),
                            ("GEL", "Georgian lari"),
                            ("GHS", "Ghanaian cedi"),
                            ("GIP", "Gibraltar pound"),
                            ("GMD", "Gambian dalasi"),
                            ("GNF", "Guinean franc"),
                            ("GTQ", "Guatemalan quetzal"),
                            ("GYD", "Guyanese dollar"),
                            ("HKD", "Hong Kong dollar"),
                            ("HNL", "Honduran lempira"),
                            ("HRK", "Croatian kuna"),
                            ("HTG", "Haitian gourde"),
                            ("HUF", "Hungarian forint"),
                            ("IDR", "Indonesian rupiah"),
                            ("ILS", "Israeli new shekel"),
                            ("INR", "Indian rupee"),
                            ("IQD", "Iraqi dinar"),
                            ("IRR", "Iranian rial"),
                            ("ISK", "Icelandic króna"),
                            ("JMD", "Jamaican dollar"),
                            ("JOD", "Jordanian dinar"),
                            ("JPY", "Japanese yen"),
                            ("KES", "Kenyan shilling"),
                            ("KGS", "Kyrgyzstani som"),
                            ("KHR", "Cambodian riel"),
                            ("KMF", "Comoro franc"),
                            ("KPW", "North Korean won"),
                            ("KRW", "South Korean won"),
                            ("KWD", "Kuwaiti dinar"),
                            ("KYD", "Cayman Islands dollar"),
                            ("KZT", "Kazakhstani tenge"),
                            ("LAK", "Lao kip"),
                            ("LBP", "Lebanese pound"),
                            ("LKR", "Sri Lankan rupee"),
                            ("LRD", "Liberian dollar"),
                            ("LSL", "Lesotho loti"),
                            ("LYD", "Libyan dinar"),
                            ("MAD", "Moroccan dirham"),
                            ("MDL", "Moldovan leu"),
                            ("MGA", "Malagasy ariary"),
                            ("MKD", "Macedonian denar"),
                            ("MMK", "Myanmar kyat"),
                            ("MNT", "Mongolian tögrög"),
                            ("MOP", "Macanese pataca"),
                            ("MRU", "Mauritanian ouguiya"),
                            ("MUR", "Mauritian rupee"),
                            ("MVR", "Maldivian rufiyaa"),
                            ("MWK", "Malawian kwacha"),
                            ("MXN", "Mexican peso"),
                            ("MYR", "Malaysian ringgit"),
                            ("MZN", "Mozambican metical"),
                            ("NAD", "Namibian dollar"),
                            ("NGN", "Nigerian naira"),
                            ("NIO", "Nicaraguan córdoba"),
                            ("NOK", "Norwegian krone"),
                            ("NPR", "Nepalese rupee"),
                            ("NZD", "New Zealand dollar"),
                            ("OMR", "Omani rial"),
                            ("PAB", "Panamanian balboa"),
                            ("PEN", "Peruvian sol"),
                            ("PGK", "Papua New Guinean kina"),
                            ("PHP", "Philippine peso"),
                            ("PKR", "Pakistani rupee"),
                            ("PLN", "Polish złoty"),
                            ("PYG", "Paraguayan guaraní"),
                            ("QAR", "Qatari riyal"),
                            ("RON", "Romanian leu"),
                            ("RSD", "Serbian dinar"),
                            ("RUB", "Russian ruble"),
                            ("RWF", "Rwandan franc"),
                            ("SAR", "Saudi riyal"),
                            ("SBD", "Solomon Islands dollar"),
                            ("SCR", "Seychelles rupee"),
                            ("SDG", "Sudanese pound"),
                            ("SEK", "Swedish krona/kronor"),
                            ("SGD", "Singapore dollar"),
                            ("SHP", "Saint Helena pound"),
                            ("SLL", "Sierra Leonean leone"),
                            ("SOS", "Somali shilling"),
                            ("SRD", "Surinamese dollar"),
                            ("SSP", "South Sudanese pound"),
                            ("STN", "São Tomé and Príncipe dobra"),
                            ("SVC", "Salvadoran colón"),
                            ("SYP", "Syrian pound"),
                            ("SZL", "Swazi lilangeni"),
                            ("THB", "Thai baht"),
                            ("TJS", "Tajikistani somoni"),
                            ("TMT", "Turkmenistan manat"),
                            ("TND", "Tunisian dinar"),
                            ("TOP", "Tongan paʻanga"),
                            ("TRY", "Turkish lira"),
                            ("TTD", "Trinidad and Tobago dollar"),
                            ("TWD", "New Taiwan dollar"),
                            ("TZS", "Tanzanian shilling"),
                            ("UAH", "Ukrainian hryvnia"),
                            ("UGX", "Ugandan shilling"),
                            ("USD", "United States dollar"),
                            ("UYU", "Uruguayan peso"),
                            ("UYW", "Unidad previsional[14]"),
                            ("UZS", "Uzbekistan som"),
                            ("VES", "Venezuelan bolívar soberano"),
                            ("VND", "Vietnamese đồng"),
                            ("VUV", "Vanuatu vatu"),
                            ("WST", "Samoan tala"),
                            ("XAF", "CFA franc BEAC"),
                            ("XAG", "Silver (one troy ounce)"),
                            ("XAU", "Gold (one troy ounce)"),
                            ("XCD", "East Caribbean dollar"),
                            ("XOF", "CFA franc BCEAO"),
                            ("XPF", "CFP franc (franc Pacifique)"),
                            ("YER", "Yemeni rial"),
                            ("ZAR", "South African rand"),
                            ("ZMW", "Zambian kwacha"),
                            ("ZWL", "Zimbabwean dollar"),
                            ("USDC", "USD Coin"),
                        ],
                        max_length=4,
                    ),
                ),
                ("dispersion_start_date", models.DateField()),
                ("dispersion_end_date", models.DateField()),
                ("female_children_count", models.PositiveIntegerField(default=0)),
                ("male_children_count", models.PositiveIntegerField(default=0)),
                ("female_adults_count", models.PositiveIntegerField(default=0)),
                ("male_adults_count", models.PositiveIntegerField(default=0)),
                ("total_households_count", models.PositiveIntegerField(default=0)),
                ("total_individuals_count", models.PositiveIntegerField(default=0)),
                ("imported_file_date", models.DateTimeField(blank=True, null=True)),
                ("steficon_applied_date", models.DateTimeField(blank=True, null=True)),
                ("is_follow_up", models.BooleanField(default=False)),
                ("exclusion_reason", models.TextField(blank=True)),
                ("exclude_household_error", models.TextField(blank=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        validators=[
                            django.core.validators.MinLengthValidator(3),
                            django.core.validators.MaxLengthValidator(255),
                        ],
                    ),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_payment_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "export_file_entitlement",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.filetemp",
                    ),
                ),
                (
                    "export_file_per_fsp",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.filetemp",
                    ),
                ),
                (
                    "export_pdf_file_summary",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.filetemp",
                    ),
                ),
                (
                    "imported_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="core.filetemp",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="program.program",
                    ),
                ),
                (
                    "program_cycle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plans",
                        to="program.programcycle",
                    ),
                ),
                (
                    "source_payment_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="follow_ups",
                        to="payment.paymentplan",
                    ),
                ),
                (
                    "steficon_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="payment_plans",
                        to="steficon.rulecommit",
                    ),
                ),
                (
                    "target_population",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plans",
                        to="targeting.targetpopulation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Plan",
                "ordering": ["created_at"],
            },
            bases=(models.Model, models.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="PaymentPlanSplit",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "split_type",
                    models.CharField(
                        choices=[
                            ("BY_RECORDS", "By Records"),
                            ("BY_COLLECTOR", "By Collector"),
                            ("BY_ADMIN_AREA1", "By Admin Area 1"),
                            ("BY_ADMIN_AREA2", "By Admin Area 2"),
                            ("BY_ADMIN_AREA3", "By Admin Area 3"),
                        ],
                        max_length=24,
                    ),
                ),
                ("chunks_no", models.IntegerField(blank=True, null=True)),
                ("sent_to_payment_gateway", models.BooleanField(default=False)),
                ("order", models.IntegerField(default=0)),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="splits",
                        to="payment.paymentplan",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServiceProvider",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("ca_id", models.CharField(max_length=255, unique=True)),
                ("full_name", models.CharField(max_length=255, null=True)),
                ("short_name", models.CharField(max_length=100, null=True)),
                ("country", models.CharField(max_length=3)),
                ("vision_id", models.CharField(max_length=255, null=True)),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PaymentVerificationSummary",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("FINISHED", "Finished"),
                            ("PENDING", "Pending"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=50,
                        verbose_name="Verification status",
                    ),
                ),
                ("activation_date", models.DateTimeField(null=True)),
                ("completion_date", models.DateTimeField(null=True)),
                ("payment_plan_object_id", models.UUIDField()),
                (
                    "payment_plan_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentVerificationPlan",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "unicef_id",
                    models.CharField(blank=True, db_index=True, max_length=255, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("FINISHED", "Finished"),
                            ("PENDING", "Pending"),
                            ("INVALID", "Invalid"),
                            ("RAPID_PRO_ERROR", "RapidPro Error"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=50,
                    ),
                ),
                ("payment_plan_object_id", models.UUIDField()),
                (
                    "sampling",
                    models.CharField(
                        choices=[
                            ("FULL_LIST", "Full list"),
                            ("RANDOM", "Random sampling"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "verification_channel",
                    models.CharField(
                        choices=[
                            ("MANUAL", "MANUAL"),
                            ("RAPIDPRO", "RAPIDPRO"),
                            ("XLSX", "XLSX"),
                        ],
                        max_length=50,
                    ),
                ),
                ("sample_size", models.PositiveIntegerField(blank=True, null=True)),
                ("responded_count", models.PositiveIntegerField(blank=True, null=True)),
                ("received_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "not_received_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "received_with_problems_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("confidence_interval", models.FloatField(blank=True, null=True)),
                ("margin_of_error", models.FloatField(blank=True, null=True)),
                ("rapid_pro_flow_id", models.CharField(blank=True, max_length=255)),
                (
                    "rapid_pro_flow_start_uuids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        default=list,
                        size=None,
                    ),
                ),
                ("age_filter", models.JSONField(blank=True, null=True)),
                (
                    "excluded_admin_areas_filter",
                    models.JSONField(blank=True, null=True),
                ),
                ("sex_filter", models.CharField(blank=True, max_length=10, null=True)),
                ("activation_date", models.DateTimeField(null=True)),
                ("completion_date", models.DateTimeField(null=True)),
                ("xlsx_file_exporting", models.BooleanField(default=False)),
                ("xlsx_file_imported", models.BooleanField(default=False)),
                ("error", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "payment_plan_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ("created_at",),
            },
            bases=(models.Model, models.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="PaymentVerification",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                ("payment_object_id", models.UUIDField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_RECEIVED", "NOT RECEIVED"),
                            ("PENDING", "PENDING"),
                            ("RECEIVED", "RECEIVED"),
                            ("RECEIVED_WITH_ISSUES", "RECEIVED WITH ISSUES"),
                        ],
                        default="PENDING",
                        max_length=50,
                    ),
                ),
                ("status_date", models.DateTimeField(null=True)),
                (
                    "received_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                ("sent_to_rapid_pro", models.BooleanField(default=False)),
                (
                    "payment_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "payment_verification_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_record_verifications",
                        to="payment.paymentverificationplan",
                    ),
                ),
            ],
            bases=(models.Model, models.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="PaymentRecord",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "version",
                    concurrency.fields.IntegerVersionField(default=0, help_text="record revision number"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Distribution Successful", "Distribution Successful"),
                            ("Not Distributed", "Not Distributed"),
                            ("Transaction Successful", "Transaction Successful"),
                            ("Transaction Erroneous", "Transaction Erroneous"),
                            ("Force failed", "Force failed"),
                            ("Partially Distributed", "Partially Distributed"),
                            ("Pending", "Pending"),
                            ("Sent to Payment Gateway", "Sent to Payment Gateway"),
                            ("Sent to FSP", "Sent to FSP"),
                            ("Manually Cancelled", "Manually Cancelled"),
                        ],
                        default="Pending",
                        max_length=255,
                    ),
                ),
                ("status_date", models.DateTimeField()),
                (
                    "delivery_type_choice",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("Mobile Money", "Mobile Money"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                            ("ATM Card", "ATM Card"),
                            ("Cash over the counter", "Cash over the counter"),
                            (
                                "Transfer to Digital Wallet",
                                "Transfer to Digital Wallet",
                            ),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                ("currency", models.CharField(max_length=4)),
                (
                    "entitlement_quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "entitlement_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "delivered_quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "delivered_quantity_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                ("delivery_date", models.DateTimeField(blank=True, null=True)),
                (
                    "transaction_reference_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "transaction_status_blockchain_link",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("ca_id", models.CharField(db_index=True, max_length=255, null=True)),
                ("ca_hash_id", models.UUIDField(null=True, unique=True)),
                ("full_name", models.CharField(max_length=255)),
                ("total_persons_covered", models.IntegerField()),
                ("distribution_modality", models.CharField(max_length=255)),
                ("target_population_cash_assist_id", models.CharField(max_length=255)),
                (
                    "entitlement_card_number",
                    models.CharField(max_length=255, null=True),
                ),
                (
                    "entitlement_card_status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("INACTIVE", "Inactive")],
                        default="ACTIVE",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("entitlement_card_issue_date", models.DateField(null=True)),
                ("vision_id", models.CharField(max_length=255, null=True)),
                ("registration_ca_id", models.CharField(max_length=255, null=True)),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.businessarea",
                    ),
                ),
                (
                    "delivery_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.deliverymechanism",
                    ),
                ),
                (
                    "head_of_household",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="household.individual",
                    ),
                ),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="household.household",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_items",
                        to="payment.cashplan",
                    ),
                ),
                (
                    "service_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payment.serviceprovider",
                    ),
                ),
                (
                    "target_population",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_records",
                        to="targeting.targetpopulation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(models.models.AdminUrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PaymentPlanSupportingDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("file", models.FileField(upload_to="")),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="payment.paymentplan",
                    ),
                ),
            ],
            options={
                "ordering": ["uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentPlanSplitPayments",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plan_split_payment",
                        to="payment.payment",
                    ),
                ),
                (
                    "payment_plan_split",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plan_split",
                        to="payment.paymentplansplit",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="paymentplansplit",
            name="payments",
            field=models.ManyToManyField(
                related_name="_payment_paymentplansplit_payments_+",
                through="payment.PaymentPlanSplitPayments",
                to="payment.Payment",
            ),
        ),
        migrations.CreateModel(
            name="PaymentHouseholdSnapshot",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("snapshot_data", models.JSONField(default=dict)),
                ("household_id", models.UUIDField()),
                (
                    "payment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="household_snapshot",
                        to="payment.payment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="payment",
            name="parent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payment_items",
                to="payment.paymentplan",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="program",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="program.program",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="source_payment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="follow_ups",
                to="payment.payment",
            ),
        ),
        migrations.CreateModel(
            name="FspXlsxTemplatePerDeliveryMechanism",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_fsp_xlsx_template_per_delivery_mechanisms",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "delivery_mechanism",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.deliverymechanism",
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fsp_xlsx_template_per_delivery_mechanisms",
                        to="payment.financialserviceprovider",
                    ),
                ),
                (
                    "xlsx_template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fsp_xlsx_template_per_delivery_mechanisms",
                        to="payment.financialserviceproviderxlsxtemplate",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="financialserviceprovider",
            name="xlsx_templates",
            field=models.ManyToManyField(
                related_name="financial_service_providers",
                through="payment.FspXlsxTemplatePerDeliveryMechanism",
                to="payment.FinancialServiceProviderXlsxTemplate",
            ),
        ),
        migrations.CreateModel(
            name="DeliveryMechanismPerPaymentPlan",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("sent_date", models.DateTimeField()),
                (
                    "status",
                    django_fsm.FSMField(db_index=True, default="NOT_SENT", max_length=50),
                ),
                ("delivery_mechanism_order", models.PositiveIntegerField()),
                ("sent_to_payment_gateway", models.BooleanField(default=False)),
                ("chosen_configuration", models.CharField(max_length=50, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_delivery_mechanisms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "delivery_mechanism",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.deliverymechanism",
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="delivery_mechanisms_per_payment_plan",
                        to="payment.financialserviceprovider",
                    ),
                ),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_mechanisms",
                        to="payment.paymentplan",
                    ),
                ),
                (
                    "sent_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sent_delivery_mechanisms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DeliveryMechanismData",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "signature_hash",
                    models.CharField(blank=True, editable=False, max_length=40),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
                ("is_valid", models.BooleanField(default=False)),
                ("validation_errors", models.JSONField(default=dict)),
                (
                    "unique_key",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=256,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "delivery_mechanism",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="payment.deliverymechanism",
                    ),
                ),
                (
                    "individual",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_mechanisms_data",
                        to="household.individual",
                    ),
                ),
                (
                    "possible_duplicate_of",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="possible_duplicates",
                        to="payment.deliverymechanismdata",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="cashplan",
            name="service_provider",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cash_plans",
                to="payment.serviceprovider",
            ),
        ),
        migrations.CreateModel(
            name="ApprovalProcess",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("sent_for_approval_date", models.DateTimeField(null=True)),
                ("sent_for_authorization_date", models.DateTimeField(null=True)),
                ("sent_for_finance_release_date", models.DateTimeField(null=True)),
                ("approval_number_required", models.PositiveIntegerField(default=1)),
                (
                    "authorization_number_required",
                    models.PositiveIntegerField(default=1),
                ),
                (
                    "finance_release_number_required",
                    models.PositiveIntegerField(default=1),
                ),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_process",
                        to="payment.paymentplan",
                    ),
                ),
                (
                    "sent_for_approval_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sent_for_authorization_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sent_for_finance_release_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Approval Processes",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="Approval",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("APPROVAL", "Approval"),
                            ("AUTHORIZATION", "Authorization"),
                            ("FINANCE_RELEASE", "Finance Release"),
                            ("REJECT", "Reject"),
                        ],
                        default="APPROVAL",
                        max_length=50,
                        verbose_name="Approval type",
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "approval_process",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approvals",
                        to="payment.approvalprocess",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="AcceptanceProcessThreshold",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "payments_range_usd",
                    django.contrib.postgres.fields.ranges.IntegerRangeField(
                        default=psycopg2.extras.NumericRange(0, None, "[)"),
                        validators=[django.contrib.postgres.validators.RangeMinValueValidator(0)],
                    ),
                ),
                ("approval_number_required", models.PositiveIntegerField(default=1)),
                (
                    "authorization_number_required",
                    models.PositiveIntegerField(default=1),
                ),
                (
                    "finance_release_number_required",
                    models.PositiveIntegerField(default=1),
                ),
                (
                    "business_area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="acceptance_process_thresholds",
                        to="core.businessarea",
                    ),
                ),
            ],
            options={
                "ordering": ("payments_range_usd",),
            },
        ),
        migrations.CreateModel(
            name="PendingDeliveryMechanismData",
            fields=[],
            options={
                "verbose_name": "Imported Delivery Mechanism Data",
                "verbose_name_plural": "Imported Delivery Mechanism Datas",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("payment.deliverymechanismdata",),
        ),
        migrations.AddIndex(
            model_name="paymentverificationsummary",
            index=models.Index(
                fields=["payment_plan_content_type", "payment_plan_object_id"],
                name="payment_pay_payment_8b7d61_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentverificationsummary",
            constraint=models.UniqueConstraint(
                fields=("payment_plan_content_type", "payment_plan_object_id"),
                name="payment_plan_content_type_and_payment_plan_id",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentverificationplan",
            index=models.Index(
                fields=["payment_plan_content_type", "payment_plan_object_id"],
                name="payment_pay_payment_3ba67e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentverification",
            index=models.Index(
                fields=["payment_content_type", "payment_object_id"],
                name="payment_pay_payment_ec4a29_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="paymentverification",
            constraint=models.UniqueConstraint(
                fields=("payment_content_type", "payment_object_id"),
                name="payment_content_type_and_payment_id",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paymentplansplitpayments",
            unique_together={("payment_plan_split", "payment")},
        ),
        migrations.AddConstraint(
            model_name="paymentplan",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("name", "program", "is_removed"),
                name="name_unique_per_program",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("parent", "household"),
                name="payment_plan_and_household",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("program_id", "order_number"),
                name="order_number_unique_per_program",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("program_id", "token_number"),
                name="token_number_unique_per_program",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="fspxlsxtemplateperdeliverymechanism",
            unique_together={("financial_service_provider", "delivery_mechanism")},
        ),
        migrations.AddConstraint(
            model_name="deliverymechanismperpaymentplan",
            constraint=models.UniqueConstraint(
                fields=(
                    "payment_plan",
                    "delivery_mechanism",
                    "delivery_mechanism_order",
                ),
                name="unique payment_plan_delivery_mechanism",
            ),
        ),
        migrations.AddConstraint(
            model_name="deliverymechanismdata",
            constraint=models.UniqueConstraint(
                fields=("individual", "delivery_mechanism"),
                name="unique_individual_delivery_mechanism",
            ),
        ),
        migrations.RunSQL(
            sql="ALTER TABLE payment_paymentverificationplan ADD unicef_id_index SERIAL",
        ),
        migrations.RunSQL(
            sql="\n        CREATE OR REPLACE FUNCTION create_pvp_unicef_id() RETURNS trigger\n            LANGUAGE plpgsql\n            AS $$\n        BEGIN\n            NEW.unicef_id := format('PVP-%s', NEW.unicef_id_index);\n            return NEW;\n        END\n        $$;\n        \n        CREATE TRIGGER create_pvp_unicef_id BEFORE INSERT ON payment_paymentverificationplan FOR EACH ROW EXECUTE PROCEDURE create_pvp_unicef_id();\n        ",
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_plan_fill_unicef_id_per_business_area_seq() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n                DECLARE businessAreaID varchar;\n                DECLARE businessAreaCode varchar;\n            begin\n                SELECT INTO businessAreaID translate(ba.id::text, '-','_') FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n                SELECT INTO businessAreaCode ba.code FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n\n                NEW.unicef_id := format('PP-%s-%s-%s', trim(businessAreaCode), to_char(NEW.created_at, 'yy'), trim(replace(to_char(nextval('payment_plan_business_area_seq_' || businessAreaID),'00000000'),',','.')));\n                RETURN NEW;\n            end\n            $$;\n            ",
        ),
        migrations.RunSQL(
            sql="CREATE TRIGGER payment_plan_fill_unicef_id_per_business_area_seq BEFORE INSERT ON payment_paymentplan FOR EACH ROW EXECUTE PROCEDURE payment_plan_fill_unicef_id_per_business_area_seq();",
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_fill_unicef_id_per_business_area_seq() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n                DECLARE businessAreaID varchar;\n                DECLARE businessAreaCode varchar;\n            begin\n                SELECT INTO businessAreaID translate(ba.id::text, '-','_') FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n                SELECT INTO businessAreaCode ba.code FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n\n                NEW.unicef_id := format('RCPT-%s-%s-%s', trim(businessAreaCode), to_char(NEW.created_at, 'yy'), trim(replace(to_char(nextval('payment_business_area_seq_' || businessAreaID),'0,000,000'),',','.')));\n                RETURN NEW;\n            end\n            $$;\n            ",
        ),
        migrations.RunSQL(
            sql="CREATE TRIGGER payment_fill_unicef_id_per_business_area_seq BEFORE INSERT ON payment_payment FOR EACH ROW EXECUTE PROCEDURE payment_fill_unicef_id_per_business_area_seq();",
        ),
    ]
