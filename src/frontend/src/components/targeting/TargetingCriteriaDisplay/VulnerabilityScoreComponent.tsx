import { AlertDialog } from '@core/AlertDialog';
import { LoadingComponent } from '@core/LoadingComponent';
import {
  PaymentPlanStatus,
  useAllSteficonRulesQuery,
} from '@generated/graphql';
import { useBaseUrl } from '@hooks/useBaseUrl';
import { useSnackbar } from '@hooks/useSnackBar';
import {
  Box,
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  TextField,
} from '@mui/material';
import { ApplyEngineFormula } from '@restgenerated/models/ApplyEngineFormula';
import { PatchedTargetPopulationCreate } from '@restgenerated/models/PatchedTargetPopulationCreate';
import { TargetPopulationDetail } from '@restgenerated/models/TargetPopulationDetail';
import { RestService } from '@restgenerated/services/RestService';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { ReactElement, useState } from 'react';
import { useTranslation } from 'react-i18next';
import styled from 'styled-components';
import { useProgramContext } from '../../../programContext';

export const ContentWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  padding: ${({ theme }) => theme.spacing(4)} ${({ theme }) => theme.spacing(4)};
`;
const VulnerabilityScoreDivider = styled.div`
  width: 100%;
  height: 1px;
  background-color: #e0e0e0;
`;
const SelectRow = styled.div`
  display: flex;
  flex-direction: row;
  width: 100%;
  align-items: center;
`;
interface CriteriaElementProps {
  alternative?: boolean;
}

const CriteriaElement = styled.div<CriteriaElementProps>`
  width: auto;
  max-width: 380px;
  position: relative;
  border: ${(props) => (props.alternative ? '0' : '2px solid #033f91')};
  border-radius: 3px;
  font-size: 16px;
  background-color: ${(props) =>
    props.alternative ? 'transparent' : '#f7faff'};
  padding: ${({ theme }) => theme.spacing(1)}
    ${({ theme, alternative }) =>
      alternative ? theme.spacing(1) : theme.spacing(17)}
    ${({ theme }) => theme.spacing(1)} ${({ theme }) => theme.spacing(4)};
  margin: ${({ theme }) => theme.spacing(2)} 0;
  p {
    margin: ${({ theme }) => theme.spacing(2)} 0;
    span {
      color: ${(props) => (props.alternative ? '#000' : '#003c8f')};
      font-weight: bold;
    }
  }
`;

const ButtonMargin = styled(Button)`
  && {
    margin-top: 4px;
    margin-left: ${({ theme }) => theme.spacing(4)};
    height: 40px;
  }
`;
const StyledTextField = styled(TextField)`
  input[type='number']::-webkit-inner-spin-button,
  input[type='number']::-webkit-outer-spin-button {
    -webkit-appearance: none;
  }
  input[type='number'] {
    -moz-appearance: textfield;
  }
  && {
    margin: 0 ${({ theme }) => theme.spacing(2)};
  }
`;
const ApplyScoreRange = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  margin: ${({ theme }) => theme.spacing(2)};
`;

export function VulnerabilityScoreComponent({
  targetPopulation,
}: {
  targetPopulation: TargetPopulationDetail;
}): ReactElement {
  const { t } = useTranslation();
  const { showMessage } = useSnackbar();
  const { isActiveProgram } = useProgramContext();
  const queryClient = useQueryClient();
  const { businessArea, programId } = useBaseUrl();

  const {
    mutateAsync: setSteficonRule,
    isPending: loadingSetSteficonRule,
    error,
  } = useMutation({
    mutationFn: ({
      businessAreaSlug,
      id,
      programSlug,
      requestBody,
    }: {
      businessAreaSlug: string;
      id: string;
      programSlug: string;
      requestBody: ApplyEngineFormula;
    }) =>
      RestService.restBusinessAreasProgramsPaymentPlansApplyEngineFormulaCreate(
        {
          businessAreaSlug,
          id,
          programSlug,
          requestBody,
        },
      ),
    onSuccess: () => {
      showMessage(t('Formula is executing, please wait until completed'));
      queryClient.invalidateQueries({
        queryKey: [
          'targetPopulation',
          businessArea,
          targetPopulation.id,
          programId,
        ],
      });
    },
    onError: (e) => {
      showMessage(e.message);
    },
  });
  const { mutateAsync: updateTargetPopulation, error: errorUpdate } =
    useMutation({
      mutationFn: ({
        businessAreaSlug,
        id,
        programSlug,
        requestBody,
      }: {
        businessAreaSlug: string;
        id: string;
        programSlug: string;
        requestBody?: PatchedTargetPopulationCreate;
      }) =>
        RestService.restBusinessAreasProgramsTargetPopulationsPartialUpdate({
          businessAreaSlug,
          id,
          programSlug,
          requestBody,
        }),
    });
  const [vulnerabilityScoreMinValue, setVulnerabilityScoreMinValue] = useState(
    targetPopulation?.vulnerabilityScoreMin?.toString(),
  );
  const [vulnerabilityScoreMaxValue, setVulnerabilityScoreMaxValue] = useState(
    targetPopulation?.vulnerabilityScoreMax?.toString(),
  );
  const [steficonRuleValue, setSteficonRuleValue] = useState<string>(
    targetPopulation.steficonRuleTargeting?.id
      ? String(targetPopulation.steficonRuleTargeting.id)
      : '',
  );
  const { data, loading } = useAllSteficonRulesQuery({
    variables: { enabled: true, deprecated: false, type: 'TARGETING' },
  });

  if (loading) return <LoadingComponent />;

  if (!targetPopulation || !data) {
    return null;
  }
  const disabled = targetPopulation.status === PaymentPlanStatus.Finished;
  if (
    ![
      PaymentPlanStatus.TpLocked,
      PaymentPlanStatus.Locked,
      PaymentPlanStatus.Processing,
      PaymentPlanStatus.SteficonWait,
      PaymentPlanStatus.SteficonRun,
      PaymentPlanStatus.SteficonCompleted,
      PaymentPlanStatus.SteficonError,
    ].includes(targetPopulation?.status as PaymentPlanStatus)
  ) {
    return null;
  }
  let menuItems = [];
  if (!loading) {
    menuItems = data.allSteficonRules?.edges?.map((item) => (
      <MenuItem key={item.node.id} value={item.node.id}>
        {item.node.name}
      </MenuItem>
    ));
  }
  let criteriaBox = null;
  if (targetPopulation?.steficonRuleTargeting?.id) {
    criteriaBox = (
      <CriteriaElement>
        <p>{t('Score')}:</p>
        <Box
          display="flex"
          flexDirection="row"
          alignItems="center"
          justifyContent="center"
        >
          {t('From')}{' '}
          <StyledTextField
            data-cy="input-vulnerability-score-min-value"
            variant="outlined"
            type="number"
            value={vulnerabilityScoreMinValue}
            disabled={disabled}
            label={t('From')}
            onChange={(event) =>
              setVulnerabilityScoreMinValue(event.target.value)
            }
          />{' '}
          {t('To')}{' '}
          <StyledTextField
            data-cy="input-vulnerability-score-max-value"
            variant="outlined"
            type="number"
            disabled={disabled}
            value={vulnerabilityScoreMaxValue}
            label={t('To')}
            onChange={(event) =>
              setVulnerabilityScoreMaxValue(event.target.value)
            }
          />
        </Box>
        <ApplyScoreRange>
          <Button
            variant="contained"
            color="primary"
            data-cy="button-apply-vulnerability-score"
            disabled={
              loadingSetSteficonRule ||
              (vulnerabilityScoreMinValue ===
                targetPopulation?.vulnerabilityScoreMin?.toString() &&
                vulnerabilityScoreMaxValue ===
                  targetPopulation?.vulnerabilityScoreMax?.toString()) ||
              (vulnerabilityScoreMinValue === '' &&
                vulnerabilityScoreMaxValue !== '') ||
              (vulnerabilityScoreMinValue !== '' &&
                vulnerabilityScoreMaxValue === '') ||
              disabled ||
              !isActiveProgram
            }
            onClick={async () => {
              try {
                await updateTargetPopulation({
                  id: targetPopulation.id,
                  programSlug: programId,
                  businessAreaSlug: businessArea,
                  requestBody: {
                    vulnerabilityScoreMin: vulnerabilityScoreMinValue,
                    vulnerabilityScoreMax: vulnerabilityScoreMaxValue,
                  },
                });
                showMessage(
                  t('Formula is executing, please wait until completed'),
                );
              } catch (e) {
                showMessage(e.message);
              }
            }}
          >
            {t('Apply')}
          </Button>
        </ApplyScoreRange>
      </CriteriaElement>
    );
  }
  return (
    <>
      <VulnerabilityScoreDivider />
      <ContentWrapper>
        <SelectRow>
          <FormControl variant="outlined" fullWidth>
            <InputLabel size="small" shrink>
              {t('Apply Additional Formula')}
            </InputLabel>
            <Select
              data-cy="select-steficon-rule"
              size="small"
              value={steficonRuleValue}
              disabled={disabled}
              onChange={(event) => setSteficonRuleValue(event.target.value)}
              MenuProps={{
                anchorOrigin: {
                  vertical: 'bottom',
                  horizontal: 'left',
                },
                transformOrigin: {
                  vertical: 'top',
                  horizontal: 'left',
                },
              }}
            >
              {menuItems}
            </Select>
          </FormControl>
          <ButtonMargin
            data-cy="button-apply-steficon-rule"
            variant="contained"
            color="primary"
            disabled={disabled || !steficonRuleValue}
            onClick={async () => {
              try {
                await setSteficonRule({
                  programSlug: programId,
                  businessAreaSlug: businessArea,
                  id: targetPopulation.id,
                  requestBody: {
                    engineFormulaRuleId: steficonRuleValue,
                    version: targetPopulation.version,
                  },
                });
                showMessage(
                  t('Formula is executing, please wait until completed'),
                );
              } catch (e) {
                showMessage(e.message);
              }
            }}
          >
            {t('Apply')}
          </ButtonMargin>
        </SelectRow>
        {criteriaBox}
      </ContentWrapper>
      <AlertDialog message={errorUpdate?.message} show={!!error} />
    </>
  );
}
