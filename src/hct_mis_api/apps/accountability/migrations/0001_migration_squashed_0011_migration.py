# Generated by Django 3.2.24 on 2024-02-16 04:49

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    replaces = [('accountability', '0001_migration'), ('accountability', '0002_migration'), ('accountability', '0003_migration'), ('accountability', '0004_migration'), ('accountability', '0005_migration'), ('accountability', '0006_migration'), ('accountability', '0007_migration'), ('accountability', '0008_migration'), ('accountability', '0009_migration'), ('accountability', '0010_migration'), ('accountability', '0011_migration')]

    dependencies = [
        ('core', '0044_migration_squashed_0057_migration'),
        ('household', '0124_migration'),
        ('program', '0038_migration'),
        ('targeting', '0031_migration'),
        ('targeting', '0034_migration'),
        ('targeting', '0039_migration'),
        ('registration_data', '0022_migration'),
        ('program', '0034_migration'),
        ('geo', '0007_migration'),
        ('household', '0119_migration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('grievance', '0054_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('unicef_id', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(max_length=60)),
                ('body', models.TextField(max_length=1000)),
                ('number_of_recipients', models.PositiveIntegerField(default=0)),
                ('sampling_type', models.CharField(choices=[('FULL_LIST', 'Full list'), ('RANDOM', 'Random sampling')], default='FULL_LIST', max_length=50)),
                ('full_list_arguments', models.JSONField(blank=True, null=True)),
                ('random_sampling_arguments', models.JSONField(blank=True, null=True)),
                ('sample_size', models.PositiveIntegerField(default=0)),
                ('business_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.businessarea')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('households', models.ManyToManyField(blank=True, related_name='messages', to='household.Household')),
                ('registration_data_import', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='registration_data.registrationdataimport')),
                ('target_population', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='targeting.targetpopulation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE accountability_message ADD unicef_id_index SERIAL;',
            reverse_sql='ALTER TABLE accountability_message DROP unicef_id_index;',
        ),
        migrations.RunSQL(
            sql="\n        CREATE OR REPLACE FUNCTION create_accountability_communication_message_unicef_id() RETURNS trigger\n            LANGUAGE plpgsql\n            AS $$\n        BEGIN\n            NEW.unicef_id := format('MSG-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));\n            return NEW;\n        END\n        $$;\n        \n        CREATE TRIGGER create_accountability_communication_message_unicef_id BEFORE INSERT ON accountability_message FOR EACH ROW EXECUTE PROCEDURE create_accountability_communication_message_unicef_id();\n        ",
            reverse_sql='\n            DROP TRIGGER create_accountability_communication_message_unicef_id ON accountability_message;\n            DROP FUNCTION create_accountability_communication_message_unicef_id();\n            ',
        ),
        migrations.RunSQL(
            sql="UPDATE accountability_message SET unicef_id = format('MSG-%s-%s', to_char(created_at, 'yy'), TRIM(CASE WHEN unicef_id_index > 9999 THEN unicef_id_index::varchar(64) ELSE to_char(unicef_id_index, '0000') END));",
            reverse_sql='UPDATE accountability_message SET unicef_id = NULL;',
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('unicef_id', models.CharField(blank=True, max_length=255, null=True)),
                ('issue_type', models.IntegerField(choices=[(1, 'Positive feedback'), (2, 'Negative feedback')], verbose_name='Issue type')),
                ('description', models.TextField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('area', models.CharField(blank=True, max_length=250)),
                ('language', models.TextField(blank=True)),
                ('consent', models.BooleanField(default=True)),
                ('admin2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geo.area')),
                ('business_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.businessarea')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('household_lookup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', to='household.household', verbose_name='Household lookup')),
                ('individual_lookup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', to='household.individual', verbose_name='Individual lookup')),
                ('linked_grievance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback', to='grievance.grievanceticket', verbose_name='Linked grievance')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='program.program')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE accountability_feedback ADD unicef_id_index SERIAL;',
            reverse_sql='ALTER TABLE accountability_feedback DROP unicef_id_index;',
        ),
        migrations.RunSQL(
            sql="\n        CREATE OR REPLACE FUNCTION create_accountability_communication_feedback_unicef_id() RETURNS trigger\n            LANGUAGE plpgsql\n            AS $$\n        BEGIN\n            NEW.unicef_id := format('FED-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));\n            return NEW;\n        END\n        $$;\n        \n        CREATE TRIGGER create_accountability_communication_feedback_unicef_id BEFORE INSERT ON accountability_feedback FOR EACH ROW EXECUTE PROCEDURE create_accountability_communication_feedback_unicef_id();\n        ",
            reverse_sql='\n            DROP TRIGGER create_accountability_communication_feedback_unicef_id ON accountability_feedback;\n            DROP FUNCTION create_accountability_communication_feedback_unicef_id();\n            ',
        ),
        migrations.RunSQL(
            sql="UPDATE accountability_feedback SET unicef_id = format('FED-%s-%s', to_char(created_at, 'yy'), TRIM(CASE WHEN unicef_id_index > 9999 THEN unicef_id_index::varchar(64) ELSE to_char(unicef_id_index, '0000') END));",
            reverse_sql='UPDATE accountability_feedback SET unicef_id = NULL;',
        ),
        migrations.CreateModel(
            name='FeedbackMessage',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('description', models.TextField(help_text='The content of the feedback message.', verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback_messages', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('feedback', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_messages', to='accountability.feedback')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='feedback',
            name='issue_type',
            field=models.CharField(choices=[('POSITIVE_FEEDBACK', 'Positive feedback'), ('NEGATIVE_FEEDBACK', 'Negative feedback')], max_length=20, verbose_name='Issue type'),
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('unicef_id', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(max_length=60)),
                ('body', models.TextField(blank=True, default='', max_length=1000)),
                ('category', models.CharField(choices=[('RAPID_PRO', 'Survey with RapidPro'), ('SMS', 'Survey with SMS'), ('MANUAL', 'Survey with manual process')], max_length=16)),
                ('number_of_recipients', models.PositiveIntegerField(default=0)),
                ('sampling_type', models.CharField(choices=[('FULL_LIST', 'Full list'), ('RANDOM', 'Random')], default='FULL_LIST', max_length=50)),
                ('full_list_arguments', models.JSONField(default=dict)),
                ('random_sampling_arguments', models.JSONField(default=dict)),
                ('sample_size', models.PositiveIntegerField(default=0)),
                ('business_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.businessarea')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to='program.program')),
                ('recipients', models.ManyToManyField(blank=True, related_name='surveys', to='household.Household')),
                ('target_population', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to='targeting.targetpopulation')),
                ('sample_file', models.FileField(blank=True, null=True, upload_to='')),
                ('sample_file_generated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE accountability_survey ADD unicef_id_index SERIAL;',
            reverse_sql='ALTER TABLE accountability_survey DROP unicef_id_index;',
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION create_accountability_survey_unicef_id() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n            BEGIN\n                NEW.unicef_id := format('SUR-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));\n                return NEW;\n            END\n            $$;\n\n            CREATE TRIGGER create_accountability_survey_unicef_id BEFORE INSERT ON accountability_survey FOR EACH ROW EXECUTE PROCEDURE create_accountability_survey_unicef_id();\n            ",
            reverse_sql='\n                DROP TRIGGER create_accountability_survey_unicef_id ON accountability_survey;\n                DROP FUNCTION create_accountability_survey_unicef_id();\n                ',
        ),
        migrations.RunSQL(
            sql="UPDATE accountability_survey SET unicef_id = format('SUR-%s-%s', to_char(created_at, 'yy'), TRIM(CASE WHEN unicef_id_index > 9999 THEN unicef_id_index::varchar(64) ELSE to_char(unicef_id_index, '0000') END));",
            reverse_sql='UPDATE accountability_survey SET unicef_id = NULL;',
        ),
        migrations.AlterModelOptions(
            name='feedback',
            options={'ordering': ('created_at',), 'verbose_name': 'Feedback'},
        ),
        migrations.AlterModelOptions(
            name='feedbackmessage',
            options={'ordering': ('created_at',), 'verbose_name': 'Feedback message'},
        ),
        migrations.AlterModelOptions(
            name='message',
            options={'ordering': ('created_at',), 'verbose_name': 'Message'},
        ),
        migrations.AlterModelOptions(
            name='survey',
            options={'ordering': ('created_at',), 'verbose_name': 'Survey'},
        ),
        migrations.AddField(
            model_name='survey',
            name='successful_rapid_pro_calls',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(), default=list, size=None),
        ),
        migrations.AlterField(
            model_name='feedback',
            name='unicef_id',
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='message',
            name='unicef_id',
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='survey',
            name='unicef_id',
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='survey',
            name='flow_id',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='message',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='program.program'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='copied_from',
            field=models.ForeignKey(blank=True, help_text='If this object was copied from another, this field will contain the object it was copied from.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copied_to', to='accountability.feedback'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='is_migration_handled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='message',
            name='copied_from',
            field=models.ForeignKey(blank=True, help_text='If this object was copied from another, this field will contain the object it was copied from.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copied_to', to='accountability.message'),
        ),
        migrations.AddField(
            model_name='message',
            name='is_migration_handled',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='feedback',
            name='migrated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='message',
            name='migrated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='feedback',
            name='is_original',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='message',
            name='is_original',
            field=models.BooleanField(default=False),
        ),
    ]
