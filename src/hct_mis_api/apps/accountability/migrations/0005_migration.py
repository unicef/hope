# Generated by Django 3.2.15 on 2022-10-24 10:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('program', '0034_migration'),
        ('core', '0044_migration_squashed_0057_migration'),
        ('targeting', '0034_migration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('household', '0124_migration'),
        ('accountability', '0004_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('unicef_id', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(max_length=60)),
                ('body', models.TextField(max_length=1000, blank=True, default='')),
                ('category', models.CharField(choices=[('RAPID_PRO', 'Survey with RapidPro'), ('SMS', 'Survey with SMS'), ('MANUAL', 'Survey with manual process')], max_length=16)),
                ('number_of_recipients', models.PositiveIntegerField(default=0)),
                ('sampling_type', models.CharField(choices=[('FULL_LIST', 'Full list'), ('RANDOM', 'Random')], default='FULL_LIST', max_length=50)),
                ('full_list_arguments', models.JSONField(default=dict)),
                ('random_sampling_arguments', models.JSONField(default=dict)),
                ('sample_size', models.PositiveIntegerField(default=0)),
                ('business_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.businessarea')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to='program.program')),
                ('recipients', models.ManyToManyField(blank=True, related_name='surveys', to='household.Household')),
                ('target_population', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='surveys', to='targeting.targetpopulation')),
                ('sample_file', models.FileField(blank=True, null=True, upload_to='')),
                ('sample_file_generated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunSQL(
            sql="ALTER TABLE accountability_survey ADD unicef_id_index SERIAL;",
            reverse_sql="ALTER TABLE accountability_survey DROP unicef_id_index;",
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION create_accountability_survey_unicef_id() RETURNS trigger
                LANGUAGE plpgsql
                AS $$
            BEGIN
                NEW.unicef_id := format('SUR-%s-%s', to_char(NEW.created_at, 'yy'), TRIM(CASE WHEN NEW.unicef_id_index > 9999 THEN NEW.unicef_id_index::varchar(64) ELSE to_char(NEW.unicef_id_index, '0000') END));
                return NEW;
            END
            $$;

            CREATE TRIGGER create_accountability_survey_unicef_id BEFORE INSERT ON accountability_survey FOR EACH ROW EXECUTE PROCEDURE create_accountability_survey_unicef_id();
            """,
            reverse_sql="""
                DROP TRIGGER create_accountability_survey_unicef_id ON accountability_survey;
                DROP FUNCTION create_accountability_survey_unicef_id();
                """,
        ),
        migrations.RunSQL(
            sql="UPDATE accountability_survey SET unicef_id = format('SUR-%s-%s', to_char(created_at, 'yy'), TRIM(CASE WHEN unicef_id_index > 9999 THEN unicef_id_index::varchar(64) ELSE to_char(unicef_id_index, '0000') END));",
            reverse_sql="UPDATE accountability_survey SET unicef_id = NULL;",
        )
    ]
