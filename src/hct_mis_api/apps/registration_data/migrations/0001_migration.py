# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid

import concurrency.fields
import django.contrib.postgres.fields.citext
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import model_utils.fields
from django.conf import settings
from django.db import migrations, models

import hct_mis_api.apps.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('household', '0001_migration'),
        ('core', '0002_migration'),
        ('program', '0001_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportData',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('FINISHED', 'Finished'), ('ERROR', 'Error'), ('VALIDATION_ERROR', 'Validation Error'), ('DELIVERY_MECHANISMS_VALIDATION_ERROR', 'Delivery Mechanisms Validation Error')], default='FINISHED', max_length=40)),
                ('business_area_slug', models.CharField(blank=True, max_length=200)),
                ('file', models.FileField(null=True, upload_to='')),
                ('data_type', models.CharField(choices=[('XLSX', 'XLSX File'), ('JSON', 'JSON File'), ('FLEX', 'Flex Registration')], default='XLSX', max_length=4)),
                ('number_of_households', models.PositiveIntegerField(null=True)),
                ('number_of_individuals', models.PositiveIntegerField(null=True)),
                ('error', models.TextField(blank=True)),
                ('validation_errors', models.TextField(blank=True)),
                ('delivery_mechanisms_validation_errors', models.TextField(blank=True)),
                ('created_by_id', models.UUIDField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KoboImportData',
            fields=[
                ('importdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='registration_data.importdata')),
                ('kobo_asset_id', models.CharField(max_length=100)),
                ('only_active_submissions', models.BooleanField(default=True)),
                ('pull_pictures', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('registration_data.importdata',),
        ),
        migrations.CreateModel(
            name='RegistrationDataImportDatahub',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('import_date', models.DateTimeField(auto_now_add=True)),
                ('hct_id', models.UUIDField(db_index=True, null=True)),
                ('import_done', models.CharField(choices=[('LOADING', 'Loading'), ('NOT_STARTED', 'Not Started'), ('STARTED', 'Started'), ('DONE', 'Done')], default='NOT_STARTED', max_length=15)),
                ('business_area_slug', models.CharField(blank=True, max_length=250)),
                ('import_data', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registration_data_import', to='registration_data.importdata')),
            ],
            options={
                'ordering': ('name',),
                'permissions': (['api_upload', 'Can upload'],),
            },
        ),
        migrations.CreateModel(
            name='RegistrationDataImport',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('version', concurrency.fields.IntegerVersionField(default=0, help_text='record revision number')),
                ('name', django.contrib.postgres.fields.citext.CICharField(db_index=True, max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.MaxLengthValidator(255), django.core.validators.RegexValidator('\\s{2,}', 'Double spaces characters are not allowed.', code='double_spaces_characters_not_allowed', inverse_match=True), django.core.validators.RegexValidator('(^\\s+)|(\\s+$)', 'Leading or trailing spaces characters are not allowed.', code='leading_trailing_spaces_characters_not_allowed', inverse_match=True), django.core.validators.ProhibitNullCharactersValidator()])),
                ('status', models.CharField(choices=[('LOADING', 'Loading'), ('DEDUPLICATION', 'Deduplication'), ('DEDUPLICATION_FAILED', 'Deduplication Failed'), ('IMPORT_SCHEDULED', 'Import Scheduled'), ('IMPORTING', 'Importing'), ('IMPORT_ERROR', 'Import Error'), ('IN_REVIEW', 'In Review'), ('MERGE_SCHEDULED', 'Merge Scheduled'), ('MERGED', 'Merged'), ('MERGING', 'Merging'), ('MERGE_ERROR', 'Merge Error'), ('REFUSED', 'Refused import')], db_index=True, default='IN_REVIEW', max_length=255)),
                ('import_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('data_source', models.CharField(choices=[('XLS', 'Excel'), ('KOBO', 'KoBo'), ('FLEX_REGISTRATION', 'Flex Registration'), ('API', 'Flex API'), ('EDOPOMOGA', 'eDopomoga'), ('PROGRAM_POPULATION', 'Programme Population'), ('ENROLL_FROM_PROGRAM', 'Enroll From Programme')], max_length=255)),
                ('number_of_individuals', models.PositiveIntegerField(db_index=True)),
                ('number_of_households', models.PositiveIntegerField(db_index=True)),
                ('batch_duplicates', models.PositiveIntegerField(default=0)),
                ('batch_possible_duplicates', models.PositiveIntegerField(default=0)),
                ('batch_unique', models.PositiveIntegerField(default=0)),
                ('golden_record_duplicates', models.PositiveIntegerField(default=0)),
                ('golden_record_possible_duplicates', models.PositiveIntegerField(default=0)),
                ('golden_record_unique', models.PositiveIntegerField(default=0)),
                ('dedup_engine_batch_duplicates', models.PositiveIntegerField(default=0)),
                ('dedup_engine_golden_record_duplicates', models.PositiveIntegerField(default=0)),
                ('datahub_id', models.UUIDField(blank=True, db_index=True, default=None, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('sentry_id', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('pull_pictures', models.BooleanField(default=True)),
                ('screen_beneficiary', models.BooleanField(default=False)),
                ('excluded', models.BooleanField(default=False, help_text='Exclude RDI in UI')),
                ('erased', models.BooleanField(default=False, help_text='Abort RDI')),
                ('refuse_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('allow_delivery_mechanisms_validation_errors', models.BooleanField(default=False)),
                ('deduplication_engine_status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('UPLOADED', 'Uploaded'), ('IN_PROGRESS', 'Started'), ('PROCESSING', 'Processing'), ('FINISHED', 'Finished'), ('ERROR', 'Error'), ('UPLOAD_ERROR', 'Upload Error')], default=None, max_length=255, null=True)),
                ('business_area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.businessarea')),
                ('import_data', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registration_data_import_hope', to='registration_data.importdata')),
                ('imported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registration_data_imports', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_imports', to='program.program')),
            ],
            options={
                'verbose_name': 'Registration data import',
                'unique_together': {('name', 'business_area')},
            },
            bases=(models.Model, hct_mis_api.apps.utils.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name='KoboImportedSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('kobo_submission_uuid', models.UUIDField()),
                ('kobo_asset_id', models.CharField(max_length=150)),
                ('kobo_submission_time', models.DateTimeField()),
                ('amended', models.BooleanField(blank=True, default=False)),
                ('imported_household', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='household.household')),
                ('registration_data_import', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registration_data.registrationdataimport')),
            ],
        ),
        migrations.CreateModel(
            name='DeduplicationEngineSimilarityPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('individual1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_duplicates_1', to='household.individual')),
                ('individual2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_duplicates_2', to='household.individual')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deduplication_engine_similarity_pairs', to='program.program')),
            ],
        ),
        migrations.AddConstraint(
            model_name='deduplicationenginesimilaritypair',
            constraint=models.CheckConstraint(check=models.Q(('individual1__lt', django.db.models.expressions.F('individual2'))), name='individual1_lt_individual2'),
        ),
        migrations.AlterUniqueTogether(
            name='deduplicationenginesimilaritypair',
            unique_together={('individual1', 'individual2')},
        ),
    ]
