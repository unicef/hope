# Generated by Django 3.2.25 on 2024-11-07 12:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("program", "0001_migration"),
        ("account", "0002_migration"),
        ("geo", "0001_migration"),
        ("core", "0001_migration"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="flexibleattribute",
            name="program",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pdu_fields",
                to="program.program",
            ),
        ),
        migrations.AddField(
            model_name="filetemp",
            name="content_type",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"
            ),
        ),
        migrations.AddField(
            model_name="filetemp",
            name="created_by",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="datacollectingtype",
            name="compatible_types",
            field=models.ManyToManyField(blank=True, to="core.DataCollectingType"),
        ),
        migrations.AddField(
            model_name="datacollectingtype",
            name="limit_to",
            field=models.ManyToManyField(blank=True, related_name="data_collecting_types", to="core.BusinessArea"),
        ),
        migrations.AddField(
            model_name="countrycodemap",
            name="country",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="geo.country"
            ),
        ),
        migrations.AddField(
            model_name="businessareapartnerthrough",
            name="business_area",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="business_area_partner_through",
                to="core.businessarea",
            ),
        ),
        migrations.AddField(
            model_name="businessareapartnerthrough",
            name="partner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="business_area_partner_through",
                to="account.partner",
            ),
        ),
        migrations.AddField(
            model_name="businessareapartnerthrough",
            name="roles",
            field=models.ManyToManyField(related_name="business_area_partner_through", to="account.Role"),
        ),
        migrations.AddField(
            model_name="businessarea",
            name="countries",
            field=models.ManyToManyField(related_name="business_areas", to="geo.Country"),
        ),
        migrations.AddField(
            model_name="businessarea",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="core.businessarea",
            ),
        ),
        migrations.AddField(
            model_name="businessarea",
            name="partners",
            field=models.ManyToManyField(
                related_name="business_areas", through="core.BusinessAreaPartnerThrough", to="account.Partner"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="flexibleattributechoice",
            unique_together={("list_name", "name")},
        ),
        migrations.AddConstraint(
            model_name="flexibleattribute",
            constraint=models.UniqueConstraint(fields=("name", "program"), name="unique_name_program"),
        ),
        migrations.AddConstraint(
            model_name="flexibleattribute",
            constraint=models.UniqueConstraint(
                condition=models.Q(("program__isnull", True)), fields=("name",), name="unique_name_without_program"
            ),
        ),
        migrations.AddConstraint(
            model_name="datacollectingtype",
            constraint=models.UniqueConstraint(fields=("label", "code"), name="unique_label_code_data_collecting_type"),
        ),
        migrations.AddConstraint(
            model_name="businessareapartnerthrough",
            constraint=models.UniqueConstraint(
                fields=("business_area", "partner"), name="unique_business_area_partner"
            ),
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_plan_business_area_seq() RETURNS trigger \n                LANGUAGE plpgsql\n                AS $$\n            begin\n                execute format('create sequence if not exists payment_plan_business_area_seq_%s', translate(NEW.id::text, '-','_'));\n                return NEW;\n            end\n            $$;\n\n            ",
        ),
        migrations.RunSQL(
            sql='CREATE TRIGGER payment_plan_business_area_seq AFTER INSERT ON core_businessarea FOR EACH ROW EXECUTE PROCEDURE payment_plan_business_area_seq();',
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_business_area_seq() RETURNS trigger \n                LANGUAGE plpgsql\n                AS $$\n            begin\n                execute format('create sequence if not exists payment_business_area_seq_%s', translate(NEW.id::text, '-','_'));\n                return NEW;\n            end\n            $$;\n\n            ",
        ),
        migrations.RunSQL(
            sql='CREATE TRIGGER payment_business_area_seq AFTER INSERT ON core_businessarea FOR EACH ROW EXECUTE PROCEDURE payment_business_area_seq();',
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION program_cycle_business_area_seq() RETURNS trigger 
                LANGUAGE plpgsql
                AS $$
                BEGIN
                    EXECUTE format('CREATE SEQUENCE IF NOT EXISTS program_cycle_business_area_seq_%s', translate(NEW.id::text, '-', '_'));
                    RETURN NEW;
                END
                $$;
            """,
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER program_cycle_business_area_seq AFTER INSERT ON core_businessarea FOR EACH ROW EXECUTE PROCEDURE program_cycle_business_area_seq();
            """,
        ),
    ]
