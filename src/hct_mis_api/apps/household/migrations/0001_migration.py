# Generated by Django 3.2.25 on 2024-11-07 12:18

import uuid

import concurrency.fields
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import multiselectfield.db.fields
import phonenumber_field.modelfields
import sorl.thumbnail.fields
from django.db import migrations, models

import hct_mis_api.apps.core.utils
import hct_mis_api.apps.utils.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0002_migration"),
        ("program", "0001_migration"),
    ]

    operations = [
        migrations.RunSQL(
            """
            create or replace function check_unique_document_for_individual(uuid, boolean)
               returns boolean
               language plpgsql
               immutable
              as
            $$
            begin
                return(select exists(select 1 from household_documenttype where id = $1 and unique_for_individual = $2));
            end;
            $$
            """,
            migrations.RunSQL.noop,
        ),
        migrations.CreateModel(
            name="BankAccountInfo",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_removed", models.BooleanField(db_index=True, default=False)),
                ("removed_date", models.DateTimeField(blank=True, null=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                ("bank_name", models.CharField(max_length=255)),
                ("bank_account_number",models.CharField(db_index=True, max_length=64)),
                ("debit_card_number", models.CharField(blank=True, db_index=True, default='', max_length=255)),
                ("bank_branch_name", models.CharField(blank=True, default="", max_length=255)),
                ("account_holder_name", models.CharField(blank=True, default="", max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_removed", models.BooleanField(default=False)),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                ("document_number", models.CharField(blank=True, db_index=True, max_length=255)),
                ("photo", models.ImageField(blank=True, upload_to="")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("VALID", "Valid"),
                            ("NEED_INVESTIGATION", "Need Investigation"),
                            ("INVALID", "Invalid"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("cleared", models.BooleanField(default=False)),
                ("cleared_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("issuance_date", models.DateTimeField(blank=True, null=True)),
                ("expiry_date", models.DateTimeField(blank=True, db_index=True, null=True)),
                ("is_migration_handled", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="DocumentType",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("label", models.CharField(max_length=100)),
                ("key", models.CharField(max_length=50, unique=True)),
                ("is_identity_document", models.BooleanField(default=True)),
                ("unique_for_individual", models.BooleanField(default=False)),
                ("valid_for_deduplication", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["label"],
            },
        ),
        migrations.CreateModel(
            name="DocumentValidator",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("regex", models.CharField(default=".*", max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EntitlementCard",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("card_number", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("ERRONEOUS", "Erroneous"), ("CLOSED", "Closed")],
                        default="ACTIVE",
                        max_length=10,
                    ),
                ),
                ("card_type", models.CharField(max_length=255)),
                ("current_card_size", models.CharField(max_length=255)),
                ("card_custodian", models.CharField(max_length=255)),
                ("service_provider", models.CharField(max_length=255)),
                ("is_original", models.BooleanField(db_index=True, default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Household",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_removed", models.BooleanField(db_index=True, default=False)),
                ("removed_date", models.DateTimeField(blank=True, null=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                ("version", concurrency.fields.IntegerVersionField(default=0, help_text="record revision number")),
                ("unicef_id", models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ("withdrawn", models.BooleanField(db_index=True, default=False)),
                ("withdrawn_date", models.DateTimeField(blank=True, db_index=True, null=True)),
                (
                    "consent_sign",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, upload_to="", validators=[django.core.validators.validate_image_file_extension]
                    ),
                ),
                ("consent", models.BooleanField(null=True)),
                (
                    "consent_sharing",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("", "None"),
                            ("GOVERNMENT_PARTNER", "Government partners"),
                            ("HUMANITARIAN_PARTNER", "Humanitarian partners"),
                            ("PRIVATE_PARTNER", "Private partners"),
                            ("UNICEF", "UNICEF"),
                        ],
                        default="",
                        max_length=63,
                    ),
                ),
                (
                    "residence_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("IDP", "Displaced  |  Internally Displaced People"),
                            ("REFUGEE", "Displaced  |  Refugee / Asylum Seeker"),
                            ("OTHERS_OF_CONCERN", "Displaced  |  Others of Concern"),
                            ("HOST", "Non-displaced  |   Host"),
                            ("NON_HOST", "Non-displaced  |   Non-host"),
                            ("RETURNEE", "Displaced  |   Returnee"),
                        ],
                        max_length=254,
                    ),
                ),
                ("address", django.contrib.postgres.fields.citext.CICharField(blank=True, max_length=1024)),
                ("zip_code", models.CharField(blank=True, max_length=12, null=True)),
                ("geopoint", django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ("size", models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ("female_age_group_0_5_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_6_11_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_12_17_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_18_59_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_60_count", models.PositiveIntegerField(default=None, null=True)),
                ("pregnant_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_0_5_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_6_11_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_12_17_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_18_59_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_60_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_0_5_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_6_11_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_12_17_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_18_59_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_age_group_60_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_0_5_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_6_11_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_12_17_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_18_59_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_age_group_60_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("children_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_children_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_children_count", models.PositiveIntegerField(default=None, null=True)),
                ("children_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("male_children_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("female_children_disabled_count", models.PositiveIntegerField(default=None, null=True)),
                ("returnee", models.BooleanField(null=True)),
                ("flex_fields", models.JSONField(blank=True, default=dict)),
                ("first_registration_date", models.DateTimeField()),
                ("last_registration_date", models.DateTimeField()),
                ("fchild_hoh", models.BooleanField(null=True)),
                ("child_hoh", models.BooleanField(null=True)),
                ("start", models.DateTimeField(blank=True, null=True)),
                ("deviceid", models.CharField(blank=True, default="", max_length=250)),
                ("name_enumerator", models.CharField(blank=True, default="", max_length=250)),
                (
                    "org_enumerator",
                    models.CharField(
                        choices=[("", "None"), ("PARTNER", "Partner"), ("UNICEF", "UNICEF")], default="", max_length=250
                    ),
                ),
                ("org_name_enumerator", models.CharField(blank=True, default="", max_length=250)),
                ("village", models.CharField(blank=True, default="", max_length=250)),
                (
                    "registration_method",
                    models.CharField(
                        choices=[
                            ("", "None"),
                            ("COMMUNITY", "Community-level Registration"),
                            ("HH_REGISTRATION", "Household Registration"),
                        ],
                        default="",
                        max_length=250,
                    ),
                ),
                (
                    "collect_individual_data",
                    models.CharField(
                        choices=[
                            ("", "Unknown"),
                            ("2", "Partial individuals collected"),
                            ("1", "Full individual collected"),
                            ("3", "Size only collected"),
                            ("0", "No individual data"),
                        ],
                        default="",
                        max_length=250,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("", "None"),
                            ("AED", "United Arab Emirates dirham"),
                            ("AFN", "Afghan afghani"),
                            ("ALL", "Albanian lek"),
                            ("AMD", "Armenian dram"),
                            ("ANG", "Netherlands Antillean guilder"),
                            ("AOA", "Angolan kwanza"),
                            ("ARS", "Argentine peso"),
                            ("AUD", "Australian dollar"),
                            ("AWG", "Aruban florin"),
                            ("AZN", "Azerbaijani manat"),
                            ("BAM", "Bosnia and Herzegovina convertible mark"),
                            ("BBD", "Barbados dollar"),
                            ("BDT", "Bangladeshi taka"),
                            ("BGN", "Bulgarian lev"),
                            ("BHD", "Bahraini dinar"),
                            ("BIF", "Burundian franc"),
                            ("BMD", "Bermudian dollar"),
                            ("BND", "Brunei dollar"),
                            ("BOB", "Boliviano"),
                            ("BOV", "Bolivian Mvdol (funds code)"),
                            ("BRL", "Brazilian real"),
                            ("BSD", "Bahamian dollar"),
                            ("BTN", "Bhutanese ngultrum"),
                            ("BWP", "Botswana pula"),
                            ("BYN", "Belarusian ruble"),
                            ("BZD", "Belize dollar"),
                            ("CAD", "Canadian dollar"),
                            ("CDF", "Congolese franc"),
                            ("CHF", "Swiss franc"),
                            ("CLP", "Chilean peso"),
                            ("CNY", "Chinese yuan"),
                            ("COP", "Colombian peso"),
                            ("CRC", "Costa Rican colon"),
                            ("CUC", "Cuban convertible peso"),
                            ("CUP", "Cuban peso"),
                            ("CVE", "Cape Verdean escudo"),
                            ("CZK", "Czech koruna"),
                            ("DJF", "Djiboutian franc"),
                            ("DKK", "Danish krone"),
                            ("DOP", "Dominican peso"),
                            ("DZD", "Algerian dinar"),
                            ("EGP", "Egyptian pound"),
                            ("ERN", "Eritrean nakfa"),
                            ("ETB", "Ethiopian birr"),
                            ("EUR", "Euro"),
                            ("FJD", "Fiji dollar"),
                            ("FKP", "Falkland Islands pound"),
                            ("GBP", "Pound sterling"),
                            ("GEL", "Georgian lari"),
                            ("GHS", "Ghanaian cedi"),
                            ("GIP", "Gibraltar pound"),
                            ("GMD", "Gambian dalasi"),
                            ("GNF", "Guinean franc"),
                            ("GTQ", "Guatemalan quetzal"),
                            ("GYD", "Guyanese dollar"),
                            ("HKD", "Hong Kong dollar"),
                            ("HNL", "Honduran lempira"),
                            ("HRK", "Croatian kuna"),
                            ("HTG", "Haitian gourde"),
                            ("HUF", "Hungarian forint"),
                            ("IDR", "Indonesian rupiah"),
                            ("ILS", "Israeli new shekel"),
                            ("INR", "Indian rupee"),
                            ("IQD", "Iraqi dinar"),
                            ("IRR", "Iranian rial"),
                            ("ISK", "Icelandic króna"),
                            ("JMD", "Jamaican dollar"),
                            ("JOD", "Jordanian dinar"),
                            ("JPY", "Japanese yen"),
                            ("KES", "Kenyan shilling"),
                            ("KGS", "Kyrgyzstani som"),
                            ("KHR", "Cambodian riel"),
                            ("KMF", "Comoro franc"),
                            ("KPW", "North Korean won"),
                            ("KRW", "South Korean won"),
                            ("KWD", "Kuwaiti dinar"),
                            ("KYD", "Cayman Islands dollar"),
                            ("KZT", "Kazakhstani tenge"),
                            ("LAK", "Lao kip"),
                            ("LBP", "Lebanese pound"),
                            ("LKR", "Sri Lankan rupee"),
                            ("LRD", "Liberian dollar"),
                            ("LSL", "Lesotho loti"),
                            ("LYD", "Libyan dinar"),
                            ("MAD", "Moroccan dirham"),
                            ("MDL", "Moldovan leu"),
                            ("MGA", "Malagasy ariary"),
                            ("MKD", "Macedonian denar"),
                            ("MMK", "Myanmar kyat"),
                            ("MNT", "Mongolian tögrög"),
                            ("MOP", "Macanese pataca"),
                            ("MRU", "Mauritanian ouguiya"),
                            ("MUR", "Mauritian rupee"),
                            ("MVR", "Maldivian rufiyaa"),
                            ("MWK", "Malawian kwacha"),
                            ("MXN", "Mexican peso"),
                            ("MYR", "Malaysian ringgit"),
                            ("MZN", "Mozambican metical"),
                            ("NAD", "Namibian dollar"),
                            ("NGN", "Nigerian naira"),
                            ("NIO", "Nicaraguan córdoba"),
                            ("NOK", "Norwegian krone"),
                            ("NPR", "Nepalese rupee"),
                            ("NZD", "New Zealand dollar"),
                            ("OMR", "Omani rial"),
                            ("PAB", "Panamanian balboa"),
                            ("PEN", "Peruvian sol"),
                            ("PGK", "Papua New Guinean kina"),
                            ("PHP", "Philippine peso"),
                            ("PKR", "Pakistani rupee"),
                            ("PLN", "Polish złoty"),
                            ("PYG", "Paraguayan guaraní"),
                            ("QAR", "Qatari riyal"),
                            ("RON", "Romanian leu"),
                            ("RSD", "Serbian dinar"),
                            ("RUB", "Russian ruble"),
                            ("RWF", "Rwandan franc"),
                            ("SAR", "Saudi riyal"),
                            ("SBD", "Solomon Islands dollar"),
                            ("SCR", "Seychelles rupee"),
                            ("SDG", "Sudanese pound"),
                            ("SEK", "Swedish krona/kronor"),
                            ("SGD", "Singapore dollar"),
                            ("SHP", "Saint Helena pound"),
                            ("SLL", "Sierra Leonean leone"),
                            ("SOS", "Somali shilling"),
                            ("SRD", "Surinamese dollar"),
                            ("SSP", "South Sudanese pound"),
                            ("STN", "São Tomé and Príncipe dobra"),
                            ("SVC", "Salvadoran colón"),
                            ("SYP", "Syrian pound"),
                            ("SZL", "Swazi lilangeni"),
                            ("THB", "Thai baht"),
                            ("TJS", "Tajikistani somoni"),
                            ("TMT", "Turkmenistan manat"),
                            ("TND", "Tunisian dinar"),
                            ("TOP", "Tongan paʻanga"),
                            ("TRY", "Turkish lira"),
                            ("TTD", "Trinidad and Tobago dollar"),
                            ("TWD", "New Taiwan dollar"),
                            ("TZS", "Tanzanian shilling"),
                            ("UAH", "Ukrainian hryvnia"),
                            ("UGX", "Ugandan shilling"),
                            ("USD", "United States dollar"),
                            ("UYU", "Uruguayan peso"),
                            ("UYW", "Unidad previsional[14]"),
                            ("UZS", "Uzbekistan som"),
                            ("VES", "Venezuelan bolívar soberano"),
                            ("VND", "Vietnamese đồng"),
                            ("VUV", "Vanuatu vatu"),
                            ("WST", "Samoan tala"),
                            ("XAF", "CFA franc BEAC"),
                            ("XAG", "Silver (one troy ounce)"),
                            ("XAU", "Gold (one troy ounce)"),
                            ("XCD", "East Caribbean dollar"),
                            ("XOF", "CFA franc BCEAO"),
                            ("XPF", "CFP franc (franc Pacifique)"),
                            ("YER", "Yemeni rial"),
                            ("ZAR", "South African rand"),
                            ("ZMW", "Zambian kwacha"),
                            ("ZWL", "Zimbabwean dollar"),
                            ("USDC", "USD Coin"),
                        ],
                        default="",
                        max_length=250,
                    ),
                ),
                ("unhcr_id", models.CharField(blank=True, db_index=True, default="", max_length=250)),
                ("user_fields", models.JSONField(blank=True, default=dict)),
                (
                    "detail_id",
                    models.CharField(
                        blank=True, help_text="Kobo asset ID, Xlsx row ID, Aurora source ID", max_length=150, null=True
                    ),
                ),
                (
                    "registration_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True, db_index=True, max_length=100, null=True, verbose_name="Aurora Registration Id"
                    ),
                ),
                (
                    "program_registration_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Beneficiary Program Registration Id",
                    ),
                ),
                (
                    "total_cash_received_usd",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=64, null=True),
                ),
                ("total_cash_received", models.DecimalField(blank=True, decimal_places=2, max_digits=64, null=True)),
                ("family_id", models.CharField(blank=True, max_length=100, null=True)),
                ("origin_unicef_id", models.CharField(blank=True, max_length=100, null=True)),
                ("is_migration_handled", models.BooleanField(default=False)),
                ("migrated_at", models.DateTimeField(blank=True, null=True)),
                ("is_recalculated_group_ages", models.BooleanField(default=False)),
                (
                    "collect_type",
                    models.CharField(
                        choices=[("STANDARD", "Standard"), ("SINGLE", "Single")], default="STANDARD", max_length=8
                    ),
                ),
                ("kobo_submission_uuid", models.UUIDField(default=None, null=True)),
                ("kobo_submission_time", models.DateTimeField(blank=True, max_length=150, null=True)),
                ("enumerator_rec_id", models.PositiveIntegerField(blank=True, null=True)),
                ("mis_unicef_id", models.CharField(max_length=255, null=True)),
                ("flex_registrations_record_id", models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Household",
                "permissions": (("can_withdrawn", "Can withdrawn Household"),),
            },
            bases=(models.Model, hct_mis_api.apps.utils.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="HouseholdCollection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("unicef_id", models.CharField(blank=True, db_index=True, max_length=255, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_removed", models.BooleanField(db_index=True, default=False)),
                ("removed_date", models.DateTimeField(blank=True, null=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                ("version", concurrency.fields.IntegerVersionField(default=0, help_text="record revision number")),
                ("unicef_id", models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ("duplicate", models.BooleanField(db_index=True, default=False)),
                ("duplicate_date", models.DateTimeField(blank=True, null=True)),
                ("withdrawn", models.BooleanField(db_index=True, default=False)),
                ("withdrawn_date", models.DateTimeField(blank=True, null=True)),
                ("individual_id", models.CharField(blank=True, max_length=255)),
                ("photo", models.ImageField(blank=True, upload_to="")),
                (
                    "full_name",
                    django.contrib.postgres.fields.citext.CICharField(
                        db_index=True, max_length=255, validators=[django.core.validators.MinLengthValidator(2)]
                    ),
                ),
                (
                    "given_name",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=85),
                ),
                (
                    "middle_name",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=85),
                ),
                (
                    "family_name",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=85),
                ),
                (
                    "sex",
                    models.CharField(choices=[("MALE", "Male"), ("FEMALE", "Female")], db_index=True, max_length=255),
                ),
                ("birth_date", models.DateField(db_index=True)),
                ("estimated_birth_date", models.BooleanField(default=False)),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("", "None"),
                            ("DIVORCED", "Divorced"),
                            ("MARRIED", "Married"),
                            ("SEPARATED", "Separated"),
                            ("SINGLE", "Single"),
                            ("WIDOWED", "Widowed"),
                        ],
                        db_index=True,
                        default="",
                        max_length=255,
                    ),
                ),
                (
                    "phone_no",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, db_index=True, max_length=128, region=None
                    ),
                ),
                ("phone_no_valid", models.BooleanField(db_index=True, null=True)),
                (
                    "phone_no_alternative",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, db_index=True, max_length=128, region=None
                    ),
                ),
                ("phone_no_alternative_valid", models.BooleanField(db_index=True, null=True)),
                ("email", models.CharField(blank=True, max_length=255)),
                (
                    "payment_delivery_phone_no",
                    phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None),
                ),
                (
                    "relationship",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("UNKNOWN", "Unknown"),
                            ("AUNT_UNCLE", "Aunt / Uncle"),
                            ("BROTHER_SISTER", "Brother / Sister"),
                            ("COUSIN", "Cousin"),
                            ("DAUGHTERINLAW_SONINLAW", "Daughter-in-law / Son-in-law"),
                            ("GRANDDAUGHER_GRANDSON", "Granddaughter / Grandson"),
                            ("GRANDMOTHER_GRANDFATHER", "Grandmother / Grandfather"),
                            ("HEAD", "Head of household (self)"),
                            ("MOTHER_FATHER", "Mother / Father"),
                            ("MOTHERINLAW_FATHERINLAW", "Mother-in-law / Father-in-law"),
                            ("NEPHEW_NIECE", "Nephew / Niece"),
                            ("NON_BENEFICIARY", "Not a Family Member. Can only act as a recipient."),
                            ("OTHER", "Other"),
                            ("SISTERINLAW_BROTHERINLAW", "Sister-in-law / Brother-in-law"),
                            ("SON_DAUGHTER", "Son / Daughter"),
                            ("WIFE_HUSBAND", "Wife / Husband"),
                            ("FOSTER_CHILD", "Foster child"),
                            ("FREE_UNION", "Free union"),
                        ],
                        help_text="This represents the MEMBER relationship. can be blank\n            as well if household is null!",
                        max_length=255,
                    ),
                ),
                (
                    "work_status",
                    models.CharField(
                        blank=True,
                        choices=[("1", "Yes"), ("0", "No"), ("NOT_PROVIDED", "Not provided")],
                        default="NOT_PROVIDED",
                        max_length=20,
                    ),
                ),
                ("first_registration_date", models.DateField()),
                ("last_registration_date", models.DateField()),
                (
                    "flex_fields",
                    models.JSONField(blank=True, default=dict, encoder=hct_mis_api.apps.core.utils.FlexFieldsEncoder),
                ),
                ("user_fields", models.JSONField(blank=True, default=dict)),
                ("enrolled_in_nutrition_programme", models.BooleanField(null=True)),
                ("administration_of_rutf", models.BooleanField(null=True)),
                (
                    "deduplication_golden_record_status",
                    models.CharField(
                        choices=[
                            ("DUPLICATE", "Duplicate"),
                            ("NEEDS_ADJUDICATION", "Needs Adjudication"),
                            ("NOT_PROCESSED", "Not Processed"),
                            ("POSTPONE", "Postpone"),
                            ("UNIQUE", "Unique"),
                        ],
                        db_index=True,
                        default="UNIQUE",
                        max_length=50,
                    ),
                ),
                (
                    "deduplication_batch_status",
                    models.CharField(
                        choices=[
                            ("DUPLICATE_IN_BATCH", "Duplicate in batch"),
                            ("NOT_PROCESSED", "Not Processed"),
                            ("SIMILAR_IN_BATCH", "Similar in batch"),
                            ("UNIQUE_IN_BATCH", "Unique in batch"),
                        ],
                        db_index=True,
                        default="UNIQUE_IN_BATCH",
                        max_length=50,
                    ),
                ),
                ("deduplication_golden_record_results", models.JSONField(blank=True, default=dict)),
                ("deduplication_batch_results", models.JSONField(blank=True, default=dict)),
                ("imported_individual_id", models.UUIDField(blank=True, null=True)),
                ("sanction_list_possible_match", models.BooleanField(db_index=True, default=False)),
                ("sanction_list_confirmed_match", models.BooleanField(db_index=True, default=False)),
                ("pregnant", models.BooleanField(null=True)),
                (
                    "disability",
                    models.CharField(
                        choices=[("disabled", "disabled"), ("not disabled", "not disabled")],
                        default="not disabled",
                        max_length=20,
                    ),
                ),
                (
                    "observed_disability",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("NONE", "None"),
                            ("SEEING", "Difficulty seeing (even if wearing glasses)"),
                            ("HEARING", "Difficulty hearing (even if using a hearing aid)"),
                            ("WALKING", "Difficulty walking or climbing steps"),
                            ("MEMORY", "Difficulty remembering or concentrating"),
                            ("SELF_CARE", "Difficulty with self care (washing, dressing)"),
                            ("COMMUNICATING", "Difficulty communicating (e.g understanding or being understood)"),
                        ],
                        default="NONE",
                        max_length=58,
                    ),
                ),
                ("disability_certificate_picture", models.ImageField(blank=True, null=True, upload_to="")),
                (
                    "seeing_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "hearing_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "physical_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "memory_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "selfcare_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "comms_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "None"),
                            ("LOT_DIFFICULTY", "A lot of difficulty"),
                            ("CANNOT_DO", "Cannot do at all"),
                            ("SOME_DIFFICULTY", "Some difficulty"),
                        ],
                        max_length=50,
                    ),
                ),
                ("who_answers_phone", models.CharField(blank=True, max_length=150)),
                ("who_answers_alt_phone", models.CharField(blank=True, max_length=150)),
                ("fchild_hoh", models.BooleanField(default=False)),
                ("child_hoh", models.BooleanField(default=False)),
                (
                    "detail_id",
                    models.CharField(
                        blank=True, help_text="Kobo asset ID, Xlsx row ID, Aurora source ID", max_length=150, null=True
                    ),
                ),
                (
                    "registration_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True, max_length=100, null=True, verbose_name="Aurora Registration Id"
                    ),
                ),
                (
                    "program_registration_id",
                    django.contrib.postgres.fields.citext.CICharField(
                        blank=True, max_length=100, null=True, verbose_name="Beneficiary Program Registration Id"
                    ),
                ),
                (
                    "preferred_language",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("en-us", "English | English"),
                            ("ar-ae", " | عربيArabic"),
                            ("cs-cz", "čeština | Czech"),
                            ("de-de", "Deutsch"),
                            ("es-es", "Español | Spanish"),
                            ("fr-fr", "Français | French"),
                            ("hu-hu", "Magyar | Hungarian"),
                            ("it-it", "Italiano"),
                            ("pl-pl", "Polskie | Polish"),
                            ("pt-pt", "Português"),
                            ("ro-ro", "Română"),
                            ("ru-ru", "Русский | Russian"),
                            ("si-si", "සිංහල | Sinhala"),
                            ("ta-ta", "தமிழ் | Tamil"),
                            ("uk-ua", "український | Ukrainian"),
                            ("hi-hi", "हिंदी"),
                        ],
                        max_length=6,
                        null=True,
                    ),
                ),
                ("relationship_confirmed", models.BooleanField(default=False)),
                ("age_at_registration", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("wallet_name", models.CharField(blank=True, default="", max_length=64)),
                ("blockchain_name", models.CharField(blank=True, default="", max_length=64)),
                ("wallet_address", models.CharField(blank=True, default="", max_length=128)),
                ("origin_unicef_id", models.CharField(blank=True, max_length=100, null=True)),
                ("is_migration_handled", models.BooleanField(default=False)),
                ("migrated_at", models.DateTimeField(blank=True, null=True)),
                ("mis_unicef_id", models.CharField(max_length=255, null=True)),
                ("vector_column", django.contrib.postgres.search.SearchVectorField(null=True)),
            ],
            options={
                "verbose_name": "Individual",
            },
            bases=(models.Model, hct_mis_api.apps.utils.models.AdminUrlMixin),
        ),
        migrations.CreateModel(
            name="IndividualCollection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("unicef_id", models.CharField(blank=True, db_index=True, max_length=255, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="IndividualIdentity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_removed", models.BooleanField(default=False)),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("number", models.CharField(max_length=255)),
                ("is_migration_handled", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Individual Identities",
            },
        ),
        migrations.CreateModel(
            name="IndividualRoleInHousehold",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rdi_merge_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("MERGED", "Merged")], default="PENDING", max_length=10
                    ),
                ),
                ("is_removed", models.BooleanField(default=False)),
                ("is_original", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("last_sync_at", models.DateTimeField(blank=True, null=True)),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NO_ROLE", "None"),
                            ("ALTERNATE", "Alternate collector"),
                            ("PRIMARY", "Primary collector"),
                        ],
                        max_length=255,
                    ),
                ),
                ("is_migration_handled", models.BooleanField(default=False)),
                ("migrated_at", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="XlsxUpdateFile",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("file", models.FileField(upload_to="")),
                (
                    "xlsx_match_columns",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=32), null=True, size=None
                    ),
                ),
                (
                    "business_area",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                ),
                (
                    "program",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="program.program"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunSQL(
            sql="ALTER TABLE household_householdcollection ADD unicef_id_index SERIAL",
        ),
        migrations.RunSQL(
            sql="ALTER TABLE household_individualcollection ADD unicef_id_index SERIAL",
        ),
        migrations.RunSQL(
            sql="""
                      CREATE TRIGGER vector_column_trigger
                      BEFORE INSERT OR UPDATE OF observed_disability, full_name, vector_column
                      ON household_individual
                      FOR EACH ROW EXECUTE PROCEDURE
                      tsvector_update_trigger(
                        vector_column, 'pg_catalog.english', observed_disability, full_name
                      );

                      UPDATE household_individual SET vector_column = NULL;
                    """,
            reverse_sql="""
                      DROP TRIGGER IF EXISTS vector_column_trigger
                      ON household_individual;
                    """,
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION generate_unique_program_registration_id()
                RETURNS TRIGGER AS $$
                DECLARE
                    new_id TEXT;
                    count INT := 0;
                BEGIN
                    -- Check if program_registration_id is empty
                    IF NEW.program_registration_id IS NULL OR NEW.program_registration_id = '' THEN
                        NEW.program_registration_id := NULL;  -- Convert empty string to NULL
                        RETURN NEW;  -- Do not modify with increasing number
                    END IF;
                    new_id := NEW.program_registration_id || '#0';  -- Initial attempt with #0
                    LOOP
                        IF NOT EXISTS (SELECT 1 FROM household_household WHERE program_registration_id = new_id) THEN
                            EXIT;
                        END IF;
                        count := count + 1;
                        new_id := NEW.program_registration_id || '#' || count;
                    END LOOP;
                    NEW.program_registration_id := new_id;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER unique_program_registration_id_trigger
                BEFORE INSERT OR UPDATE ON household_household
                FOR EACH ROW
                EXECUTE FUNCTION generate_unique_program_registration_id();
            """,
            reverse_sql="""
                       DROP TRIGGER IF EXISTS unique_program_registration_id_trigger ON household_household;
                       DROP FUNCTION IF EXISTS generate_unique_program_registration_id();
                   """,
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION create_hhc_unicef_id() RETURNS trigger
                    LANGUAGE plpgsql
                    AS $$
                begin
                    IF NEW.unicef_id IS NULL THEN
                        NEW.unicef_id := format('HHC-%s', trim(replace(to_char(NEW.unicef_id_index,'0000,0000'),',','.')));
                    END IF;
                    return NEW;
                end
                $$;
                CREATE TRIGGER create_hhc_unicef_id BEFORE INSERT ON household_householdcollection 
                FOR EACH ROW EXECUTE PROCEDURE create_hhc_unicef_id();
                """,
            reverse_sql="""
              DROP TRIGGER IF EXISTS create_hhc_unicef_id
              ON household_householdcollection;
            """,
        ),
        migrations.RunSQL(
            """
                CREATE OR REPLACE FUNCTION create_indc_unicef_id() RETURNS trigger
                    LANGUAGE plpgsql
                    AS $$
                begin
                    IF NEW.unicef_id IS NULL THEN
                        NEW.unicef_id := format('INDC-%s', trim(replace(to_char(NEW.unicef_id_index,'0000,0000'),',','.')));
                    END IF;
                    return NEW;
                end
                $$;
                CREATE TRIGGER create_indc_unicef_id BEFORE INSERT ON household_individualcollection
                FOR EACH ROW EXECUTE PROCEDURE create_indc_unicef_id();
            """,
            reverse_sql="""
                  DROP TRIGGER IF EXISTS create_indc_unicef_id
                  ON household_individualcollection;
                """,
        ),
        # Create triggers for unicef_id generation houeshold individual
        migrations.RunSQL(
            sql="ALTER TABLE household_household ADD unicef_id_index SERIAL",
        ),
        migrations.RunSQL(
            sql="ALTER TABLE household_individual ADD unicef_id_index SERIAL",
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION create_hh_unicef_id() RETURNS trigger
                LANGUAGE plpgsql
                AS $$
            begin
                IF NEW.unicef_id IS NULL THEN
                    NEW.unicef_id := format('HH-%s-%s',TO_CHAR(NEW.first_registration_date, 'yy'), trim(replace(to_char(NEW.unicef_id_index,'0000,0000'),',','.')));
                END IF;
                return NEW;
            end
            $$;
            CREATE TRIGGER create_hh_unicef_id BEFORE INSERT ON household_household FOR EACH ROW EXECUTE PROCEDURE create_hh_unicef_id();
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION create_ii_unicef_id() RETURNS trigger
                LANGUAGE plpgsql
                AS $$
            begin 
                IF NEW.unicef_id IS NULL THEN
                    NEW.unicef_id := format('IND-%s-%s',TO_CHAR(NEW.first_registration_date, 'yy'), trim(replace(to_char(NEW.unicef_id_index,'0000,0000'),',','.')));
                END IF;
                return NEW;
            end
            $$;
             CREATE TRIGGER create_ii_unicef_id BEFORE INSERT ON household_individual FOR EACH ROW EXECUTE PROCEDURE create_ii_unicef_id();
            """,
            reverse_sql=migrations.RunSQL.noop,
        ),
    ]
