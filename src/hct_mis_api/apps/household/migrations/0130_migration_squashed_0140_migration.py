# Generated by Django 3.2.19 on 2023-06-12 08:20

from django.conf import settings
from django.db import migrations, models
import django.utils.timezone
from functools import lru_cache

from django.db import migrations, models
import django.db.models.deletion

from hct_mis_api.apps.account.models import Partner


@lru_cache(maxsize=None)
def get_partner(model, partner_name: str) -> Partner:
    return model.objects.get(name=partner_name)


@lru_cache(maxsize=None)
def get_country(model, country_id):
    return model.objects.get(id=country_id)


def populate_partner_and_country(apps, schema_editor):
    IndividualIdentity = apps.get_model("household", "IndividualIdentity")
    Partner = apps.get_model("account", "Partner")
    Country = apps.get_model("geo", "Country")

    for identity in IndividualIdentity.objects.all():
        identity.partner = get_partner(Partner, identity.agency.type)
        identity.country = get_country(Country, identity.agency.country_id)
        identity.save(update_fields=("partner", "country"))


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("geo", "0007_migration"),
        ("household", "0129_migration"),
        ("account", "0042_migration_squashed_0050_migration"),
    ]

    operations = [
        migrations.AddField(
            model_name="individual",
            name="phone_no_alternative_valid",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="individual",
            name="phone_no_valid",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="individualidentity",
            name="country",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="geo.country"
            ),
        ),
        migrations.AddField(
            model_name="individualidentity",
            name="partner",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="individual_identities",
                to="account.partner",
            ),
        ),
        migrations.RunPython(populate_partner_and_country, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="individualidentity",
            name="agency",
        ),
        migrations.DeleteModel(
            name="Agency",
        ),
        migrations.RemoveConstraint(
            model_name="document",
            name="unique_if_not_removed_and_valid",
        ),
        migrations.AddConstraint(
            model_name="document",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    models.Q(("is_removed", False), ("status", "VALID"))
                ),
                fields=("document_number", "type", "country"),
                name="unique_if_not_removed_and_valid",
            ),
        ),
        migrations.AddField(
            model_name="household",
            name="admin1",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="geo.area",
            ),
        ),
        migrations.AddField(
            model_name="household",
            name="admin2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="geo.area",
            ),
        ),
        migrations.AddField(
            model_name="household",
            name="admin3",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="geo.area",
            ),
        ),
        migrations.AddField(
            model_name="household",
            name="admin4",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="geo.area",
            ),
        ),
        migrations.AddField(
            model_name="individual",
            name="preferred_language",
            field=models.CharField(
                blank=True,
                choices=[
                    ("en-us", "en-us"),
                    ("ar-ae", "ar-ae"),
                    ("cs-cz", "cs-cz"),
                    ("de-de", "de-de"),
                    ("es-es", "es-es"),
                    ("fr-fr", "fr-fr"),
                    ("hu-hu", "hu-hu"),
                    ("it-it", "it-it"),
                    ("pl-pl", "pl-pl"),
                    ("pt-pt", "pt-pt"),
                    ("ro-ro", "ro-ro"),
                    ("ru-ru", "ru-ru"),
                    ("si-si", "si-si"),
                    ("ta-ta", "ta-ta"),
                    ("uk-ua", "uk-ua"),
                    ("hi-hi", "hi-hi"),
                ],
                max_length=6,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="documenttype",
            name="is_identity_document",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="documenttype",
            name="type",
            field=models.CharField(
                choices=[
                    ("BIRTH_CERTIFICATE", "Birth Certificate"),
                    ("DRIVERS_LICENSE", "Driver's License"),
                    ("ELECTORAL_CARD", "Electoral Card"),
                    ("NATIONAL_ID", "National ID"),
                    ("NATIONAL_PASSPORT", "National Passport"),
                    ("TAX_ID", "Tax Number Identification"),
                    ("RESIDENCE_PERMIT_NO", "Foreigner's Residence Permit"),
                    ("BANK_STATEMENT", "Bank Statement"),
                    ("OTHER", "Other"),
                ],
                max_length=50,
                unique=True,
            ),
        ),
        migrations.RunSQL(
            sql="CREATE INDEX IF NOT EXISTS household_household_composite_default_page_idx ON household_household (business_area_id, is_removed, unicef_id);",
        ),
        migrations.RunSQL(
            sql="CREATE INDEX IF NOT EXISTS household_individual_composite_default_page_idx ON household_individual (business_area_id, is_removed, unicef_id);",
        ),
        migrations.AlterField(
            model_name="documenttype",
            name="type",
            field=models.CharField(
                choices=[
                    ("BIRTH_CERTIFICATE", "Birth Certificate"),
                    ("DRIVERS_LICENSE", "Driver's License"),
                    ("ELECTORAL_CARD", "Electoral Card"),
                    ("NATIONAL_ID", "National ID"),
                    ("NATIONAL_PASSPORT", "National Passport"),
                    ("TAX_ID", "Tax Number Identification"),
                    ("RESIDENCE_PERMIT_NO", "Foreigner's Residence Permit"),
                    ("BANK_STATEMENT", "Bank Statement"),
                    ("DISABILITY_CERTIFICATE", "Disability Certificate"),
                    ("OTHER", "Other"),
                ],
                max_length=50,
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="cleared",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="document",
            name="cleared_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="cleared_date",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="individual",
            name="relationship_confirmed",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="documenttype",
            name="type",
            field=models.CharField(
                choices=[
                    ("BIRTH_CERTIFICATE", "Birth Certificate"),
                    ("DRIVERS_LICENSE", "Driver's License"),
                    ("ELECTORAL_CARD", "Electoral Card"),
                    ("NATIONAL_ID", "National ID"),
                    ("NATIONAL_PASSPORT", "National Passport"),
                    ("TAX_ID", "Tax Number Identification"),
                    ("RESIDENCE_PERMIT_NO", "Foreigner's Residence Permit"),
                    ("BANK_STATEMENT", "Bank Statement"),
                    ("DISABILITY_CERTIFICATE", "Disability Certificate"),
                    ("FOSTER_CHILD", "Foster Child"),
                    ("OTHER", "Other"),
                ],
                max_length=50,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="individual",
            name="relationship",
            field=models.CharField(
                blank=True,
                choices=[
                    ("UNKNOWN", "Unknown"),
                    ("AUNT_UNCLE", "Aunt / Uncle"),
                    ("BROTHER_SISTER", "Brother / Sister"),
                    ("COUSIN", "Cousin"),
                    ("DAUGHTERINLAW_SONINLAW", "Daughter-in-law / Son-in-law"),
                    ("GRANDDAUGHTER_GRANDSON", "Granddaughter / Grandson"),
                    ("GRANDMOTHER_GRANDFATHER", "Grandmother / Grandfather"),
                    ("HEAD", "Head of household (self)"),
                    ("MOTHER_FATHER", "Mother / Father"),
                    ("MOTHERINLAW_FATHERINLAW", "Mother-in-law / Father-in-law"),
                    ("NEPHEW_NIECE", "Nephew / Niece"),
                    (
                        "NON_BENEFICIARY",
                        "Not a Family Member. Can only act as a recipient.",
                    ),
                    ("OTHER", "Other"),
                    ("SISTERINLAW_BROTHERINLAW", "Sister-in-law / Brother-in-law"),
                    ("SON_DAUGHTER", "Son / Daughter"),
                    ("WIFE_HUSBAND", "Wife / Husband"),
                    ("FOSTER_CHILD", "Foster child"),
                ],
                help_text="This represents the MEMBER relationship. can be blank\n            as well if household is null!",
                max_length=255,
            ),
        ),
    ]
