# Generated by Django 3.2.19 on 2023-06-10 13:10

import concurrency.fields
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import model_utils.fields
import uuid
from django.db import migrations

from hct_mis_api.apps.grievance.models import GrievanceTicket
from hct_mis_api.apps.household.models import DUPLICATE


def get_deduplication_golden_record(individual):
    status_key = "duplicates" if individual.deduplication_golden_record_status == DUPLICATE else "possible_duplicates"
    return individual.deduplication_golden_record_results.get(status_key, [])


def fill_extra_data(apps, schema_editor):
    TicketNeedsAdjudicationDetails = apps.get_model("grievance", "TicketNeedsAdjudicationDetails")

    db_alias = schema_editor.connection.alias
    tickets = TicketNeedsAdjudicationDetails.objects.using(db_alias).exclude(ticket__status=GrievanceTicket.STATUS_CLOSED)
    for ticket in tickets:
        extra_data = {
            "golden_records": get_deduplication_golden_record(ticket.golden_records_individual),
            "possible_duplicate": get_deduplication_golden_record(ticket.possible_duplicate),
        }
        ticket.extra_data = extra_data

    TicketNeedsAdjudicationDetails.objects.bulk_update(tickets, ["extra_data"])

class Migration(migrations.Migration):

    dependencies = [
        ('household', '0003_migration_squashed_0086_migration'),
        ('core', '0017_migration_squashed_0040_migration'),
        ('sanction_list', '0001_migration_squashed_0009_migration'),
        ('geo', '0004_migration'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('registration_data', '0013_migration'),
        ('payment', '0010_migration_squashed_0029_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='GrievanceTicket',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_modified', models.DateTimeField(blank=True, help_text='Date this ticket was most recently changed.', null=True, verbose_name='Modified')),
                ('status', models.IntegerField(choices=[(1, 'New'), (2, 'Assigned'), (3, 'In Progress'), (4, 'On Hold'), (5, 'For Approval'), (6, 'Closed')], default=1, verbose_name='Status')),
                ('category', models.IntegerField(choices=[(1, 'Payment Verification'), (2, 'Data Change'), (3, 'Sensitive Grievance'), (4, 'Grievance Complaint'), (5, 'Negative Feedback'), (6, 'Referral'), (7, 'Positive Feedback'), (8, 'Deduplication')], verbose_name='Category')),
                ('issue_type', models.IntegerField(blank=True, null=True, verbose_name='Type')),
                ('description', models.TextField(blank=True, help_text='The content of the customers query.', verbose_name='Description')),
                ('admin', models.CharField(blank=True, max_length=250)),
                ('area', models.CharField(blank=True, max_length=250)),
                ('language', models.TextField()),
                ('consent', models.BooleanField(default=True)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Assigned to')),
                ('business_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='core.businessarea')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ('status', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='TicketSensitiveDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensitive_ticket_details', to='household.household')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensitive_ticket_details', to='household.individual')),
                ('payment_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensitive_ticket_details', to='payment.paymentrecord')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sensitive_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GrievanceTicketThrough',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('linked_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grievance_tickets_through_linked', to='grievance.grievanceticket')),
                ('main_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grievance_tickets_through_main', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='linked_tickets',
            field=models.ManyToManyField(related_name='linked_tickets_related', through='grievance.GrievanceTicketThrough', to='grievance.GrievanceTicket'),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='category',
            field=models.IntegerField(choices=[(1, 'Payment Verification'), (2, 'Data Change'), (3, 'Sensitive Grievance'), (4, 'Grievance Complaint'), (5, 'Negative Feedback'), (6, 'Referral'), (7, 'Positive Feedback'), (8, 'Needs Adjudication'), (9, 'System Flagging')], verbose_name='Category'),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Assigned to'),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='language',
            field=models.TextField(blank=True),
        ),
        migrations.AlterModelOptions(
            name='grievanceticket',
            options={'ordering': ('status', 'created_at'), 'verbose_name': 'Grievance Ticket'},
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='version',
            field=concurrency.fields.IntegerVersionField(default=0, help_text='record revision number'),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.CreateModel(
            name='TicketAddIndividualDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('individual_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='add_individual_ticket_details', to='household.household')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='add_individual_ticket_details', to='grievance.grievanceticket')),
                ('approve_status', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketComplaintDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='complaint_ticket_details', to='household.household')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='complaint_ticket_details', to='household.individual')),
                ('payment_record', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='complaint_ticket_details', to='payment.paymentrecord')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='complaint_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketDeleteIndividualDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='delete_individual_ticket_details', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delete_individual_ticket_details', to='grievance.grievanceticket')),
                ('approve_status', models.BooleanField(default=False)),
                ('role_reassign_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketHouseholdDataUpdateDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='household_data_update_ticket_details', to='household.household')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='household_data_update_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketIndividualDataUpdateDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('individual_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='individual_data_update_ticket_details', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='individual_data_update_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketNeedsAdjudicationDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('selected_individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='household.individual')),
                ('role_reassign_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('golden_records_individual', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='household.individual')),
                ('possible_duplicate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='needs_adjudication_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketNote',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('description', models.TextField(help_text='The content of the customers query.', verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_notes', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_notes', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketPaymentVerificationDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('payment_verification_status', models.CharField(choices=[('PENDING', 'PENDING'), ('RECEIVED', 'RECEIVED'), ('NOT_RECEIVED', 'NOT RECEIVED'), ('RECEIVED_WITH_ISSUES', 'RECEIVED WITH ISSUES')], max_length=50)),
                ('payment_verifications', models.ManyToManyField(related_name='ticket_details', to='payment.PaymentVerification')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_verification_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketSystemFlaggingDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('approve_status', models.BooleanField(default=False)),
                ('role_reassign_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('golden_records_individual', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='household.individual')),
                ('sanction_list_individual', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='sanction_list.sanctionlistindividual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='system_flagging_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='grievanceticket',
            name='user_modified',
            field=models.DateTimeField(blank=True, db_index=True, help_text='Date this ticket was most recently changed.', null=True, verbose_name='Modified'),
        ),
        migrations.RemoveField(
            model_name='grievanceticket',
            name='admin',
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='admin2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.adminarea'),
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='registration_data_import',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='registration_data.registrationdataimport'),
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='last_notification_sent',
            field=models.DateTimeField(blank=True, db_index=True, help_text='Date this ticket was most recently changed.', null=True, verbose_name='Modified'),
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='unicef_id',
            field=models.CharField(blank=True, default='', max_length=250),
        ),
        migrations.RunSQL(
            sql='ALTER TABLE grievance_grievanceticket ADD unicef_id_index SERIAL',
            reverse_sql='ALTER TABLE grievance_grievanceticket DROP unicef_id_index',
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION create_gt_unicef_id() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n            begin\n              NEW.unicef_id := format('GRV-%s', trim(to_char(NEW.unicef_id_index,'000000')));\n              return NEW;\n            end\n            $$;\n    \n            CREATE TRIGGER create_gt_unicef_id \n                BEFORE INSERT \n                ON grievance_grievanceticket \n                FOR EACH ROW \n            EXECUTE PROCEDURE create_gt_unicef_id();\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS create_gt_unicef_id ON grievance_grievanceticket\n            ',
        ),
        migrations.RunSQL(
            sql="\n            UPDATE grievance_grievanceticket \n            SET unicef_id = format('GRV-%s', trim(to_char(unicef_id_index,'000000')));\n            ",
            reverse_sql='',
        ),
        migrations.AddField(
            model_name='ticketindividualdataupdatedetails',
            name='role_reassign_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.CreateModel(
            name='TicketPositiveFeedbackDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='positive_feedback_ticket_details', to='household.household')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='positive_feedback_ticket_details', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='positive_feedback_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketNegativeFeedbackDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='negative_feedback_ticket_details', to='household.household')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='negative_feedback_ticket_details', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='negative_feedback_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketReferralDetails',
            fields=[
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('household', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referral_ticket_details', to='household.household')),
                ('individual', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referral_ticket_details', to='household.individual')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='referral_ticket_details', to='grievance.grievanceticket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ticketneedsadjudicationdetails',
            name='extra_data',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.RunPython(fill_extra_data, migrations.RunPython.noop),
        migrations.AddField(
            model_name='grievanceticket',
            name='extras',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='grievanceticket',
            name='admin2_new',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geo.area'),
        ),
    ]
