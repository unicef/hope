# Generated by Django 3.2.15 on 2022-10-13 08:24

from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django_fsm
import hct_mis_api.apps.account.models
import model_utils.fields
import multiselectfield.db.fields
import uuid


def populate_existing_payment_record_usd_amount(apps, schema_editor):
    PaymentRecord = apps.get_model("payment", "PaymentRecord")
    all_payment_records = PaymentRecord.objects.all()

    for payment_record in all_payment_records:
        exchange_rate = payment_record.cash_plan.exchange_rate if payment_record.cash_plan else None
        if exchange_rate:
            payment_record.entitlement_quantity_usd = Decimal(
                payment_record.entitlement_quantity * exchange_rate
            ).quantize(Decimal(".01"))

    PaymentRecord.objects.bulk_update(all_payment_records, ["entitlement_quantity_usd"])


def populate_existing_cash_plan_usd_amount(apps, schema_editor):
    CashPlan = apps.get_model("payment", "CashPlan")
    all_cash_plans = CashPlan.objects.all()

    for cash_plan in all_cash_plans:
        if cash_plan.exchange_rate:
            cash_plan.total_delivered_quantity_usd = Decimal(
                cash_plan.total_delivered_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_undelivered_quantity_usd = Decimal(
                cash_plan.total_undelivered_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_entitled_quantity_usd = Decimal(
                cash_plan.total_entitled_quantity * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))
            cash_plan.total_entitled_quantity_revised_usd = Decimal(
                cash_plan.total_entitled_quantity_revised * cash_plan.exchange_rate
            ).quantize(Decimal(".01"))

    CashPlan.objects.bulk_update(
        all_cash_plans,
        [
            "total_delivered_quantity_usd",
            "total_undelivered_quantity_usd",
            "total_entitled_quantity_usd",
            "total_entitled_quantity_revised_usd",
        ],
    )


class Migration(migrations.Migration):

    dependencies = [
        ("steficon", "0017_migration"),
        ("core", "0060_migration_squashed_0064_migration"),
        ("household", "0119_migration"),
        ("program", "0035_migration"),
        ("payment", "0030_migration_squashed_0051_migration"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="cashplanpaymentverification",
            name="rapid_pro_flow_start_uuids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=255), default=list, size=None
            ),
        ),
        migrations.AlterField(
            model_name="cashplanpaymentverification",
            name="unicef_id",
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name="cashplanpaymentverification",
            name="status",
            field=models.CharField(
                choices=[
                    ("ACTIVE", "Active"),
                    ("FINISHED", "Finished"),
                    ("PENDING", "Pending"),
                    ("INVALID", "Invalid"),
                ],
                db_index=True,
                default="PENDING",
                max_length=50,
            ),
        ),
        migrations.CreateModel(
            name="PaymentChannel",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("delivery_data", models.JSONField(blank=True, default=dict)),
                (
                    "delivery_mechanism",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("In Kind", "In Kind"),
                            ("Mobile Money", "Mobile Money"),
                            ("Other", "Other"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "individual",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="household.individual"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="paymentrecord",
            name="entitlement_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="head_of_household",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="household.individual"),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="household",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="household.household"),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="CashPlan",
                    fields=[
                        (
                            "id",
                            model_utils.fields.UUIDField(
                                default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                            ),
                        ),
                        ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                        ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                        ("ca_id", models.CharField(db_index=True, max_length=255, null=True)),
                        ("ca_hash_id", models.UUIDField(null=True, unique=True)),
                        (
                            "status",
                            models.CharField(
                                choices=[
                                    ("Distribution Completed", "Distribution Completed"),
                                    ("Distribution Completed with Errors", "Distribution Completed with Errors"),
                                    ("Transaction Completed", "Transaction Completed"),
                                    ("Transaction Completed with Errors", "Transaction Completed with Errors"),
                                ],
                                db_index=True,
                                max_length=255,
                            ),
                        ),
                        ("status_date", models.DateTimeField()),
                        ("name", models.CharField(db_index=True, max_length=255)),
                        ("distribution_level", models.CharField(max_length=255)),
                        ("start_date", models.DateTimeField(db_index=True)),
                        ("end_date", models.DateTimeField(db_index=True)),
                        ("dispersion_date", models.DateTimeField()),
                        ("coverage_duration", models.PositiveIntegerField()),
                        ("coverage_unit", models.CharField(max_length=255)),
                        ("comments", models.CharField(max_length=255, null=True)),
                        (
                            "delivery_type",
                            models.CharField(
                                choices=[
                                    ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                                    ("Cash", "Cash"),
                                    ("Cash by FSP", "Cash by FSP"),
                                    ("Cheque", "Cheque"),
                                    ("Deposit to Card", "Deposit to Card"),
                                    ("In Kind", "In Kind"),
                                    ("Mobile Money", "Mobile Money"),
                                    ("Other", "Other"),
                                    ("Pre-paid card", "Pre-paid card"),
                                    ("Referral", "Referral"),
                                    ("Transfer", "Transfer"),
                                    ("Transfer to Account", "Transfer to Account"),
                                    ("Voucher", "Voucher"),
                                ],
                                db_index=True,
                                max_length=24,
                                null=True,
                            ),
                        ),
                        ("assistance_measurement", models.CharField(db_index=True, max_length=255)),
                        ("assistance_through", models.CharField(db_index=True, max_length=255)),
                        ("vision_id", models.CharField(max_length=255, null=True)),
                        ("funds_commitment", models.CharField(max_length=255, null=True)),
                        ("exchange_rate", models.DecimalField(blank=True, decimal_places=8, max_digits=12, null=True)),
                        ("down_payment", models.CharField(max_length=255, null=True)),
                        ("validation_alerts_count", models.IntegerField()),
                        ("total_persons_covered", models.IntegerField(db_index=True)),
                        ("total_persons_covered_revised", models.IntegerField(db_index=True)),
                        (
                            "total_entitled_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_entitled_quantity_revised",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_delivered_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "total_undelivered_quantity",
                            models.DecimalField(
                                db_index=True,
                                decimal_places=2,
                                max_digits=12,
                                null=True,
                                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                            ),
                        ),
                        (
                            "business_area",
                            models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                        ),
                        (
                            "program",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="cash_plans",
                                to="program.program",
                            ),
                        ),
                        (
                            "service_provider",
                            models.ForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="cash_plans",
                                to="payment.serviceprovider",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "Cash Plan",
                        "ordering": ["created_at"],
                    },
                ),
                migrations.AlterField(
                    model_name="cashplanpaymentverification",
                    name="cash_plan",
                    field=models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="verifications", to="payment.cashplan"
                    ),
                ),
                migrations.AlterField(
                    model_name="cashplanpaymentverificationsummary",
                    name="cash_plan",
                    field=models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cash_plan_payment_verification_summary",
                        to="payment.cashplan",
                    ),
                ),
                migrations.AlterField(
                    model_name="paymentrecord",
                    name="cash_plan",
                    field=models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_records",
                        to="payment.cashplan",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentPlan",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("status_date", models.DateTimeField()),
                ("start_date", models.DateTimeField(db_index=True)),
                ("end_date", models.DateTimeField(db_index=True)),
                ("exchange_rate", models.DecimalField(blank=True, decimal_places=8, max_digits=12, null=True)),
                (
                    "total_entitled_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_entitled_quantity_revised_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_delivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "total_undelivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMField(
                        choices=[
                            ("OPEN", "Open"),
                            ("LOCKED", "Locked"),
                            ("IN_APPROVAL", "In Approval"),
                            ("IN_AUTHORIZATION", "In Authorization"),
                            ("IN_REVIEW", "In Review"),
                            ("ACCEPTED", "Accepted"),
                        ],
                        db_index=True,
                        default="OPEN",
                        max_length=50,
                    ),
                ),
                (
                    "unicef_id",
                    django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=250),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("", "None"),
                            ("AED", "United Arab Emirates dirham"),
                            ("AFN", "Afghan afghani"),
                            ("ALL", "Albanian lek"),
                            ("AMD", "Armenian dram"),
                            ("ANG", "Netherlands Antillean guilder"),
                            ("AOA", "Angolan kwanza"),
                            ("ARS", "Argentine peso"),
                            ("AUD", "Australian dollar"),
                            ("AWG", "Aruban florin"),
                            ("AZN", "Azerbaijani manat"),
                            ("BAM", "Bosnia and Herzegovina convertible mark"),
                            ("BBD", "Barbados dollar"),
                            ("BDT", "Bangladeshi taka"),
                            ("BGN", "Bulgarian lev"),
                            ("BHD", "Bahraini dinar"),
                            ("BIF", "Burundian franc"),
                            ("BMD", "Bermudian dollar"),
                            ("BND", "Brunei dollar"),
                            ("BOB", "Boliviano"),
                            ("BOV", "Bolivian Mvdol (funds code)"),
                            ("BRL", "Brazilian real"),
                            ("BSD", "Bahamian dollar"),
                            ("BTN", "Bhutanese ngultrum"),
                            ("BWP", "Botswana pula"),
                            ("BYN", "Belarusian ruble"),
                            ("BZD", "Belize dollar"),
                            ("CAD", "Canadian dollar"),
                            ("CDF", "Congolese franc"),
                            ("CHF", "Swiss franc"),
                            ("CLP", "Chilean peso"),
                            ("CNY", "Chinese yuan"),
                            ("COP", "Colombian peso"),
                            ("CRC", "Costa Rican colon"),
                            ("CUC", "Cuban convertible peso"),
                            ("CUP", "Cuban peso"),
                            ("CVE", "Cape Verdean escudo"),
                            ("CZK", "Czech koruna"),
                            ("DJF", "Djiboutian franc"),
                            ("DKK", "Danish krone"),
                            ("DOP", "Dominican peso"),
                            ("DZD", "Algerian dinar"),
                            ("EGP", "Egyptian pound"),
                            ("ERN", "Eritrean nakfa"),
                            ("ETB", "Ethiopian birr"),
                            ("EUR", "Euro"),
                            ("FJD", "Fiji dollar"),
                            ("FKP", "Falkland Islands pound"),
                            ("GBP", "Pound sterling"),
                            ("GEL", "Georgian lari"),
                            ("GHS", "Ghanaian cedi"),
                            ("GIP", "Gibraltar pound"),
                            ("GMD", "Gambian dalasi"),
                            ("GNF", "Guinean franc"),
                            ("GTQ", "Guatemalan quetzal"),
                            ("GYD", "Guyanese dollar"),
                            ("HKD", "Hong Kong dollar"),
                            ("HNL", "Honduran lempira"),
                            ("HRK", "Croatian kuna"),
                            ("HTG", "Haitian gourde"),
                            ("HUF", "Hungarian forint"),
                            ("IDR", "Indonesian rupiah"),
                            ("ILS", "Israeli new shekel"),
                            ("INR", "Indian rupee"),
                            ("IQD", "Iraqi dinar"),
                            ("IRR", "Iranian rial"),
                            ("ISK", "Icelandic króna"),
                            ("JMD", "Jamaican dollar"),
                            ("JOD", "Jordanian dinar"),
                            ("JPY", "Japanese yen"),
                            ("KES", "Kenyan shilling"),
                            ("KGS", "Kyrgyzstani som"),
                            ("KHR", "Cambodian riel"),
                            ("KMF", "Comoro franc"),
                            ("KPW", "North Korean won"),
                            ("KRW", "South Korean won"),
                            ("KWD", "Kuwaiti dinar"),
                            ("KYD", "Cayman Islands dollar"),
                            ("KZT", "Kazakhstani tenge"),
                            ("LAK", "Lao kip"),
                            ("LBP", "Lebanese pound"),
                            ("LKR", "Sri Lankan rupee"),
                            ("LRD", "Liberian dollar"),
                            ("LSL", "Lesotho loti"),
                            ("LYD", "Libyan dinar"),
                            ("MAD", "Moroccan dirham"),
                            ("MDL", "Moldovan leu"),
                            ("MGA", "Malagasy ariary"),
                            ("MKD", "Macedonian denar"),
                            ("MMK", "Myanmar kyat"),
                            ("MNT", "Mongolian tögrög"),
                            ("MOP", "Macanese pataca"),
                            ("MRU", "Mauritanian ouguiya"),
                            ("MUR", "Mauritian rupee"),
                            ("MVR", "Maldivian rufiyaa"),
                            ("MWK", "Malawian kwacha"),
                            ("MXN", "Mexican peso"),
                            ("MYR", "Malaysian ringgit"),
                            ("MZN", "Mozambican metical"),
                            ("NAD", "Namibian dollar"),
                            ("NGN", "Nigerian naira"),
                            ("NIO", "Nicaraguan córdoba"),
                            ("NOK", "Norwegian krone"),
                            ("NPR", "Nepalese rupee"),
                            ("NZD", "New Zealand dollar"),
                            ("OMR", "Omani rial"),
                            ("PAB", "Panamanian balboa"),
                            ("PEN", "Peruvian sol"),
                            ("PGK", "Papua New Guinean kina"),
                            ("PHP", "Philippine peso"),
                            ("PKR", "Pakistani rupee"),
                            ("PLN", "Polish złoty"),
                            ("PYG", "Paraguayan guaraní"),
                            ("QAR", "Qatari riyal"),
                            ("RON", "Romanian leu"),
                            ("RSD", "Serbian dinar"),
                            ("RUB", "Russian ruble"),
                            ("RWF", "Rwandan franc"),
                            ("SAR", "Saudi riyal"),
                            ("SBD", "Solomon Islands dollar"),
                            ("SCR", "Seychelles rupee"),
                            ("SDG", "Sudanese pound"),
                            ("SEK", "Swedish krona/kronor"),
                            ("SGD", "Singapore dollar"),
                            ("SHP", "Saint Helena pound"),
                            ("SLL", "Sierra Leonean leone"),
                            ("SOS", "Somali shilling"),
                            ("SRD", "Surinamese dollar"),
                            ("SSP", "South Sudanese pound"),
                            ("STN", "São Tomé and Príncipe dobra"),
                            ("SVC", "Salvadoran colón"),
                            ("SYP", "Syrian pound"),
                            ("SZL", "Swazi lilangeni"),
                            ("THB", "Thai baht"),
                            ("TJS", "Tajikistani somoni"),
                            ("TMT", "Turkmenistan manat"),
                            ("TND", "Tunisian dinar"),
                            ("TOP", "Tongan paʻanga"),
                            ("TRY", "Turkish lira"),
                            ("TTD", "Trinidad and Tobago dollar"),
                            ("TWD", "New Taiwan dollar"),
                            ("TZS", "Tanzanian shilling"),
                            ("UAH", "Ukrainian hryvnia"),
                            ("UGX", "Ugandan shilling"),
                            ("USD", "United States dollar"),
                            ("UYU", "Uruguayan peso"),
                            ("UYW", "Unidad previsional[14]"),
                            ("UZS", "Uzbekistan som"),
                            ("VES", "Venezuelan bolívar soberano"),
                            ("VND", "Vietnamese đồng"),
                            ("VUV", "Vanuatu vatu"),
                            ("WST", "Samoan tala"),
                            ("XAF", "CFA franc BEAC"),
                            ("XAG", "Silver (one troy ounce)"),
                            ("XAU", "Gold (one troy ounce)"),
                            ("XCD", "East Caribbean dollar"),
                            ("XOF", "CFA franc BCEAO"),
                            ("XPF", "CFP franc (franc Pacifique)"),
                            ("YER", "Yemeni rial"),
                            ("ZAR", "South African rand"),
                            ("ZMW", "Zambian kwacha"),
                            ("ZWL", "Zimbabwean dollar"),
                        ],
                        max_length=4,
                    ),
                ),
                ("dispersion_start_date", models.DateTimeField()),
                ("dispersion_end_date", models.DateTimeField()),
                ("female_children_count", models.PositiveSmallIntegerField(default=0)),
                ("male_children_count", models.PositiveSmallIntegerField(default=0)),
                ("female_adults_count", models.PositiveSmallIntegerField(default=0)),
                ("male_adults_count", models.PositiveSmallIntegerField(default=0)),
                ("total_households_count", models.PositiveSmallIntegerField(default=0)),
                ("total_individuals_count", models.PositiveSmallIntegerField(default=0)),
                (
                    "business_area",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_payment_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("program", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="program.program")),
                (
                    "target_population",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_plans",
                        to="targeting.targetpopulation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Plan",
                "ordering": ["created_at"],
            },
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_delivered_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_entitled_quantity_revised_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_entitled_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AddField(
            model_name="cashplan",
            name="total_undelivered_quantity_usd",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="cashplan",
            name="program",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="program.program"),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="service_provider",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="payment.serviceprovider"),
        ),
        migrations.RunPython(
            code=populate_existing_payment_record_usd_amount,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_existing_cash_plan_usd_amount,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="FinancialServiceProvider",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("vision_vendor_number", models.CharField(max_length=100, unique=True)),
                (
                    "delivery_mechanisms",
                    hct_mis_api.apps.account.models.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                                ("Cash", "Cash"),
                                ("Cash by FSP", "Cash by FSP"),
                                ("Cheque", "Cheque"),
                                ("Deposit to Card", "Deposit to Card"),
                                ("In Kind", "In Kind"),
                                ("Mobile Money", "Mobile Money"),
                                ("Other", "Other"),
                                ("Pre-paid card", "Pre-paid card"),
                                ("Referral", "Referral"),
                                ("Transfer", "Transfer"),
                                ("Transfer to Account", "Transfer to Account"),
                                ("Voucher", "Voucher"),
                            ],
                            max_length=24,
                        ),
                        size=None,
                    ),
                ),
                (
                    "distribution_limit",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        help_text="The maximum amount of money that can be distributed or unlimited if 0",
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "communication_channel",
                    models.CharField(
                        choices=[("API", "API"), ("SFTP", "SFTP"), ("XLSX", "XLSX")], db_index=True, max_length=6
                    ),
                ),
                (
                    "data_transfer_configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the data transfer mechanism",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_financial_service_providers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("is_removed", models.BooleanField(default=False)),
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Distribution Successful", "Distribution Successful"),
                            ("Not Distributed", "Not Distributed"),
                            ("Transaction Successful", "Transaction Successful"),
                            ("Transaction Erroneous", "Transaction Erroneous"),
                        ],
                        max_length=255,
                    ),
                ),
                ("status_date", models.DateTimeField()),
                (
                    "delivery_type",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("In Kind", "In Kind"),
                            ("Mobile Money", "Mobile Money"),
                            ("Other", "Other"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                        ],
                        max_length=24,
                    ),
                ),
                ("currency", models.CharField(max_length=4)),
                (
                    "entitlement_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "entitlement_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "delivered_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "delivered_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                ("delivery_date", models.DateTimeField(blank=True, null=True)),
                ("transaction_reference_id", models.CharField(max_length=255, null=True)),
                ("excluded", models.BooleanField(default=False)),
                ("entitlement_date", models.DateTimeField(blank=True, null=True)),
                (
                    "business_area",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.businessarea"),
                ),
                (
                    "head_of_household",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="household.individual"
                    ),
                ),
                ("household", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="household.household")),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="payments", to="payment.paymentplan"
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="payment.financialserviceprovider"
                    ),
                ),
                (
                    "collector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collector_payments",
                        to="household.individual",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("payment_plan", "household"),
                name="payment_plan_and_household",
            ),
        ),
        migrations.CreateModel(
            name="FinancialServiceProviderXlsxTemplate",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("name", models.CharField(max_length=120, verbose_name="Name")),
                (
                    "columns",
                    multiselectfield.db.fields.MultiSelectField(
                        choices=[
                            ("payment_id", "Payment ID"),
                            ("household_id", "Household ID"),
                            ("admin_leve_2", "Admin Level 2"),
                            ("collector_name", "Collector Name"),
                            ("payment_channel", "Payment Channel (Delivery mechanism)"),
                            ("fsp_name", "FSP Name"),
                            ("entitlement_quantity", "Entitlement Quantity"),
                            ("tbd", "TBD"),
                        ],
                        default=[
                            "payment_id",
                            "household_id",
                            "admin_leve_2",
                            "collector_name",
                            "payment_channel",
                            "fsp_name",
                            "entitlement_quantity",
                        ],
                        help_text="Select the columns to include in the report",
                        max_length=101,
                        verbose_name="Columns",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_financial_service_provider_xlsx_templates",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FinancialServiceProviderXlsxReport",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("file", models.FileField(blank=True, editable=False, null=True, upload_to="")),
                (
                    "status",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Processing"), (2, "Generated"), (3, "Failed")],
                        db_index=True,
                        editable=False,
                        null=True,
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payment.financialserviceprovider",
                        verbose_name="Financial Service Provider",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="financialserviceprovider",
            name="fsp_xlsx_template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="payment.financialserviceproviderxlsxtemplate",
                verbose_name="XLSX Template",
            ),
        ),
        migrations.CreateModel(
            name="DeliveryMechanismPerPaymentPlan",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("sent_date", models.DateTimeField()),
                ("status", django_fsm.FSMField(db_index=True, default="NOT_SENT", max_length=50)),
                ("delivery_mechanism_order", models.PositiveIntegerField()),
                (
                    "entitlement_quantity",
                    models.DecimalField(
                        db_index=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "entitlement_quantity_usd",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_delivery_mechanisms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "delivery_mechanism",
                    models.CharField(
                        choices=[
                            ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                            ("Cash", "Cash"),
                            ("Cash by FSP", "Cash by FSP"),
                            ("Cheque", "Cheque"),
                            ("Deposit to Card", "Deposit to Card"),
                            ("In Kind", "In Kind"),
                            ("Mobile Money", "Mobile Money"),
                            ("Other", "Other"),
                            ("Pre-paid card", "Pre-paid card"),
                            ("Referral", "Referral"),
                            ("Transfer", "Transfer"),
                            ("Transfer to Account", "Transfer to Account"),
                            ("Voucher", "Voucher"),
                        ],
                        db_index=True,
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="delivery_mechanisms",
                        to="payment.paymentplan",
                    ),
                ),
                (
                    "sent_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sent_delivery_mechanisms",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "financial_service_provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="delivery_mechanisms_per_payment_plan",
                        to="payment.financialserviceprovider",
                    ),
                ),
            ],
            options={
                "unique_together": {("payment_plan", "delivery_mechanism", "delivery_mechanism_order")},
            },
        ),
        migrations.AddConstraint(
            model_name="deliverymechanismperpaymentplan",
            constraint=models.UniqueConstraint(
                fields=("payment_plan", "delivery_mechanism"), name="unique payment_plan_delivery_mechanism"
            ),
        ),
        migrations.AddConstraint(
            model_name="deliverymechanismperpaymentplan",
            constraint=models.UniqueConstraint(
                fields=("payment_plan", "delivery_mechanism_order"), name="unique payment_plan_delivery_mechanism_order"
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="assigned_payment_channel",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="payment.paymentchannel"
            ),
        ),
        migrations.CreateModel(
            name="ApprovalProcess",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("sent_for_approval_date", models.DateTimeField(null=True)),
                ("sent_for_authorization_date", models.DateTimeField(null=True)),
                ("sent_for_finance_review_date", models.DateTimeField(null=True)),
                (
                    "payment_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approval_process",
                        to="payment.paymentplan",
                    ),
                ),
                (
                    "sent_for_approval_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sent_for_authorization_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sent_for_finance_review_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Approval Processes",
                "ordering": ("-created_at",),
            },
        ),
        migrations.AlterField(
            model_name="payment",
            name="delivery_type",
            field=models.CharField(
                choices=[
                    ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                    ("Cash", "Cash"),
                    ("Cash by FSP", "Cash by FSP"),
                    ("Cheque", "Cheque"),
                    ("Deposit to Card", "Deposit to Card"),
                    ("In Kind", "In Kind"),
                    ("Mobile Money", "Mobile Money"),
                    ("Other", "Other"),
                    ("Pre-paid card", "Pre-paid card"),
                    ("Referral", "Referral"),
                    ("Transfer", "Transfer"),
                    ("Transfer to Account", "Transfer to Account"),
                    ("Voucher", "Voucher"),
                ],
                max_length=24,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="delivery_type",
            field=models.CharField(
                choices=[
                    ("Cardless cash withdrawal", "Cardless cash withdrawal"),
                    ("Cash", "Cash"),
                    ("Cash by FSP", "Cash by FSP"),
                    ("Cheque", "Cheque"),
                    ("Deposit to Card", "Deposit to Card"),
                    ("In Kind", "In Kind"),
                    ("Mobile Money", "Mobile Money"),
                    ("Other", "Other"),
                    ("Pre-paid card", "Pre-paid card"),
                    ("Referral", "Referral"),
                    ("Transfer", "Transfer"),
                    ("Transfer to Account", "Transfer to Account"),
                    ("Voucher", "Voucher"),
                ],
                max_length=24,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="payment",
            name="delivered_quantity",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="payment",
            name="entitlement_quantity",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="delivered_quantity",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="entitlement_quantity",
            field=models.DecimalField(
                decimal_places=2,
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
            ),
        ),
        migrations.CreateModel(
            name="Approval",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("APPROVAL", "Approval"),
                            ("AUTHORIZATION", "Authorization"),
                            ("FINANCE_REVIEW", "Finance Review"),
                            ("REJECT", "Reject"),
                        ],
                        default="APPROVAL",
                        max_length=50,
                        verbose_name="Approval type",
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "approval_process",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="approvals",
                        to="payment.approvalprocess",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="dispersion_end_date",
            field=models.DateField(),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="dispersion_start_date",
            field=models.DateField(),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="steficon_applied_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="steficon_rule",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="payment_plans",
                to="steficon.rulecommit",
            ),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="xlsx_file_imported_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="financialserviceprovider",
            name="distribution_limit",
            field=models.DecimalField(
                db_index=True,
                decimal_places=2,
                help_text="The maximum amount of money that can be distributed or unlimited if 0",
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
            ),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="status",
            field=django_fsm.FSMField(
                choices=[
                    ("OPEN", "Open"),
                    ("LOCKED", "Locked"),
                    ("IN_APPROVAL", "In Approval"),
                    ("IN_AUTHORIZATION", "In Authorization"),
                    ("IN_REVIEW", "In Review"),
                    ("ACCEPTED", "Accepted"),
                    ("STEFICON_WAIT", "Waiting for Rule Engine"),
                    ("STEFICON_RUN", "Rule Engine Running"),
                    ("STEFICON_COMPLETED", "Rule Engine Completed"),
                    ("STEFICON_ERROR", "Rule Engine Errored"),
                    ("XLSX_EXPORTING", "Exporting XLSX file"),
                    ("XLSX_IMPORTING", "Importing XLSX file"),
                ],
                db_index=True,
                default="OPEN",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="unicef_id",
            field=django.contrib.postgres.fields.citext.CICharField(blank=True, db_index=True, max_length=250),
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_plan_fill_unicef_id_per_business_area_seq() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n                DECLARE businessAreaID varchar;\n                DECLARE businessAreaCode varchar;\n            begin\n                SELECT INTO businessAreaID translate(ba.id::text, '-','_') FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n                SELECT INTO businessAreaCode ba.code FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n\n                NEW.unicef_id := format('PP-%s-%s-%s', trim(businessAreaCode), to_char(NEW.created_at, 'yy'), trim(replace(to_char(nextval('payment_plan_business_area_seq_' || businessAreaID),'00000000'),',','.')));\n                RETURN NEW;\n            end\n            $$;\n            ",
        ),
        migrations.RunSQL(
            sql="CREATE TRIGGER payment_plan_fill_unicef_id_per_business_area_seq BEFORE INSERT ON payment_paymentplan FOR EACH ROW EXECUTE PROCEDURE payment_plan_fill_unicef_id_per_business_area_seq();",
        ),
        migrations.RunSQL(
            sql="\n            CREATE OR REPLACE FUNCTION payment_fill_unicef_id_per_business_area_seq() RETURNS trigger\n                LANGUAGE plpgsql\n                AS $$\n                DECLARE businessAreaID varchar;\n                DECLARE businessAreaCode varchar;\n            begin\n                SELECT INTO businessAreaID translate(ba.id::text, '-','_') FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n                SELECT INTO businessAreaCode ba.code FROM core_businessarea ba WHERE ba.id=NEW.business_area_id;\n\n                NEW.unicef_id := format('RCPT-%s-%s-%s', trim(businessAreaCode), to_char(NEW.created_at, 'yy'), trim(replace(to_char(nextval('payment_business_area_seq_' || businessAreaID),'0,000,000'),',','.')));\n                RETURN NEW;\n            end\n            $$;\n            ",
        ),
        migrations.RunSQL(
            sql="CREATE TRIGGER payment_fill_unicef_id_per_business_area_seq BEFORE INSERT ON payment_payment FOR EACH ROW EXECUTE PROCEDURE payment_fill_unicef_id_per_business_area_seq();",
        ),
        migrations.AlterField(
            model_name="deliverymechanismperpaymentplan",
            name="financial_service_provider",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="delivery_mechanisms_per_payment_plan",
                to="payment.financialserviceprovider",
            ),
        ),
        migrations.AlterField(
            model_name="deliverymechanismperpaymentplan",
            name="sent_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="sent_delivery_mechanisms",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveConstraint(
            model_name="deliverymechanismperpaymentplan",
            name="unique payment_plan_delivery_mechanism",
        ),
        migrations.RemoveConstraint(
            model_name="deliverymechanismperpaymentplan",
            name="unique payment_plan_delivery_mechanism_order",
        ),
        migrations.AddConstraint(
            model_name="deliverymechanismperpaymentplan",
            constraint=models.UniqueConstraint(
                fields=("payment_plan", "delivery_mechanism", "delivery_mechanism_order"),
                name="unique payment_plan_delivery_mechanism",
            ),
        ),
        migrations.AlterField(
            model_name="payment",
            name="unicef_id",
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="unicef_id",
            field=models.CharField(blank=True, db_index=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="export_per_fsp_zip_file",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="+", to="core.filetemp"
            ),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="export_xlsx_file",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="+", to="core.filetemp"
            ),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="imported_xlsx_file",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="+", to="core.filetemp"
            ),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="status",
            field=django_fsm.FSMField(
                choices=[
                    ("OPEN", "Open"),
                    ("LOCKED", "Locked"),
                    ("LOCKED_FSP", "Locked FSP"),
                    ("IN_APPROVAL", "In Approval"),
                    ("IN_AUTHORIZATION", "In Authorization"),
                    ("IN_REVIEW", "In Review"),
                    ("ACCEPTED", "Accepted"),
                    ("STEFICON_WAIT", "Waiting for Rule Engine"),
                    ("STEFICON_RUN", "Rule Engine Running"),
                    ("STEFICON_COMPLETED", "Rule Engine Completed"),
                    ("STEFICON_ERROR", "Rule Engine Errored"),
                    ("XLSX_EXPORTING", "Exporting XLSX file"),
                    ("XLSX_IMPORTING", "Importing XLSX file"),
                ],
                db_index=True,
                default="OPEN",
                max_length=50,
            ),
        ),
        migrations.AlterField(
            model_name="financialserviceproviderxlsxtemplate",
            name="columns",
            field=multiselectfield.db.fields.MultiSelectField(
                choices=[
                    ("payment_id", "Payment ID"),
                    ("household_id", "Household ID"),
                    ("admin_leve_2", "Admin Level 2"),
                    ("collector_name", "Collector Name"),
                    ("payment_channel", "Payment Channel (Delivery mechanism)"),
                    ("fsp_name", "FSP Name"),
                    ("entitlement_quantity", "Entitlement Quantity"),
                    ("delivered_quantity", "Delivered Quantity"),
                    ("tbd", "TBD"),
                ],
                default=[
                    "payment_id",
                    "household_id",
                    "admin_leve_2",
                    "collector_name",
                    "payment_channel",
                    "fsp_name",
                    "entitlement_quantity",
                    "delivered_quantity",
                ],
                help_text="Select the columns to include in the report",
                max_length=120,
                verbose_name="Columns",
            ),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="status",
            field=django_fsm.FSMField(
                choices=[
                    ("OPEN", "Open"),
                    ("LOCKED", "Locked"),
                    ("LOCKED_FSP", "Locked FSP"),
                    ("IN_APPROVAL", "In Approval"),
                    ("IN_AUTHORIZATION", "In Authorization"),
                    ("IN_REVIEW", "In Review"),
                    ("ACCEPTED", "Accepted"),
                ],
                db_index=True,
                default="OPEN",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="background_action_status",
            field=django_fsm.FSMField(
                blank=True,
                choices=[
                    ("STEFICON_RUN", "Rule Engine Running"),
                    ("STEFICON_ERROR", "Rule Engine Errored"),
                    ("XLSX_EXPORTING", "Exporting XLSX file"),
                    ("XLSX_EXPORT_ERROR", "Export XLSX file Error"),
                    ("XLSX_IMPORT_ERROR", "Import XLSX file Error"),
                    ("XLSX_IMPORTING_ENTITLEMENTS", "Importing Entitlements XLSX file"),
                    ("XLSX_IMPORTING_RECONCILIATION", "Importing Reconciliation XLSX file"),
                ],
                db_index=True,
                default=None,
                max_length=50,
                null=True,
            ),
        ),
        migrations.RenameField(
            model_name="payment",
            old_name="payment_plan",
            new_name="parent",
        ),
        migrations.AlterField(
            model_name="payment",
            name="parent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="payment_items", to="payment.paymentplan"
            ),
        ),
        migrations.RenameField(
            model_name="paymentrecord",
            old_name="cash_plan",
            new_name="parent",
        ),
        migrations.AlterField(
            model_name="paymentrecord",
            name="parent",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payment_items",
                to="payment.cashplan",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="payment",
            name="payment_plan_and_household",
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_removed", False)),
                fields=("parent", "household"),
                name="payment_plan_and_household",
            ),
        ),
        migrations.AlterField(
            model_name="cashplan",
            name="exchange_rate",
            field=models.DecimalField(blank=True, decimal_places=8, max_digits=14, null=True),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="exchange_rate",
            field=models.DecimalField(blank=True, decimal_places=8, max_digits=14, null=True),
        ),
        migrations.RenameField(
            model_name="paymentplan",
            old_name="xlsx_file_imported_date",
            new_name="imported_file_date",
        ),
        migrations.RemoveField(
            model_name="paymentplan",
            name="export_per_fsp_zip_file",
        ),
        migrations.RemoveField(
            model_name="paymentplan",
            name="export_xlsx_file",
        ),
        migrations.RemoveField(
            model_name="paymentplan",
            name="imported_xlsx_file",
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="export_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="core.filetemp",
            ),
        ),
        migrations.AddField(
            model_name="paymentplan",
            name="imported_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="core.filetemp",
            ),
        ),
        migrations.AlterField(
            model_name="payment",
            name="assigned_payment_channel",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="payment.paymentchannel"
            ),
        ),
        migrations.AlterField(
            model_name="paymentchannel",
            name="individual",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="payment_channels", to="household.individual"
            ),
        ),
        migrations.AlterField(
            model_name="financialserviceprovider",
            name="distribution_limit",
            field=models.DecimalField(
                blank=True,
                db_index=True,
                decimal_places=2,
                help_text="The maximum amount of money in USD that can be distributed or unlimited if null",
                max_digits=12,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
            ),
        ),
        migrations.AlterField(
            model_name="payment",
            name="assigned_payment_channel",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="payment.paymentchannel"
            ),
        ),
        migrations.AlterField(
            model_name="paymentplan",
            name="status",
            field=django_fsm.FSMField(
                choices=[
                    ("OPEN", "Open"),
                    ("LOCKED", "Locked"),
                    ("LOCKED_FSP", "Locked FSP"),
                    ("IN_APPROVAL", "In Approval"),
                    ("IN_AUTHORIZATION", "In Authorization"),
                    ("IN_REVIEW", "In Review"),
                    ("ACCEPTED", "Accepted"),
                    ("RECONCILED", "Reconciled"),
                ],
                db_index=True,
                default="OPEN",
                max_length=50,
            ),
        ),
        migrations.RemoveField(
            model_name="deliverymechanismperpaymentplan",
            name="entitlement_quantity",
        ),
        migrations.RemoveField(
            model_name="deliverymechanismperpaymentplan",
            name="entitlement_quantity_usd",
        ),
        migrations.AddField(
            model_name="paymentchannel",
            name="is_fallback",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="payment",
            name="financial_service_provider",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="payment.financialserviceprovider"
            ),
        ),
        migrations.AlterField(
            model_name="financialserviceproviderxlsxtemplate",
            name="columns",
            field=multiselectfield.db.fields.MultiSelectField(
                choices=[
                    ("payment_id", "Payment ID"),
                    ("household_id", "Household ID"),
                    ("household_size", "Household Size"),
                    ("admin_level_2", "Admin Level 2"),
                    ("collector_name", "Collector Name"),
                    ("payment_channel", "Payment Channel (Delivery mechanism)"),
                    ("fsp_name", "FSP Name"),
                    ("currency", "Currency"),
                    ("entitlement_quantity", "Entitlement Quantity"),
                    ("entitlement_quantity_usd", "Entitlement Quantity USD"),
                    ("delivered_quantity", "Delivered Quantity"),
                ],
                default=[
                    "payment_id",
                    "household_id",
                    "household_size",
                    "admin_level_2",
                    "collector_name",
                    "payment_channel",
                    "fsp_name",
                    "currency",
                    "entitlement_quantity",
                    "entitlement_quantity_usd",
                    "delivered_quantity",
                ],
                help_text="Select the columns to include in the report",
                max_length=166,
                verbose_name="Columns",
            ),
        ),
    ]
