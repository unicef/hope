name: TESTS
permissions:
  contents: read
on:
  workflow_call:
jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    env:
      DOCKER_DEFAULT_PLATFORM: linux/amd64
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/aurora
      CACHE_DEFAULT: redis://localhost:6379/0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libjpeg-dev \
            zlib1g-dev \
            postgresql-client \
            libpq-dev \
            python3-psycopg2 \
            python3-gdal \
            gdal-bin \
            libcairo2 \
            libcairo2-dev \
            libffi-dev \
            libgdk-pixbuf2.0-0 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            shared-mime-info \
            wkhtmltopdf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Launch services with Docker Compose
        run: |
          docker-compose -f development_tools/compose.yml up -d

      - name: Wait for Postgres to be ready
        run: |
          until docker exec $(docker-compose -f development_tools/compose.yml ps -q db) pg_isready -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Wait for Redis to be ready
        run: |
          until docker exec $(docker-compose -f development_tools/compose.yml  ps -q redis) redis-cli ping | grep PONG; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Install Python & UV
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
          enable-cache: true
          prune-cache: false
          cache-local-path: ./uv-cache
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          python-version: 3.13

      - name: Restore cached vEnv
        id: cache-venv-restore
        uses: actions/cache@v4
        with:
          path: |
            ./venv
            ./tox
          key: ${{ runner.os }}-venv

      - name: Install dependencies
        run: uv sync --cache-dir ./uv-cache --frozen

      - name: Save vEnv cache
        id: cache-venv-save
        uses: actions/cache@v4
        with:
          path: |
            ./venv
            ./tox
          key: ${{ runner.os }}-venv


      - name: Run Test suite
        run: uv run tox -e unit -- -n auto --cov-report xml:test-coverage/coverage.xml --junit-xml=test-results.xml --cov-config=.coveragerc --cov=hope

      - name: Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: JEST Tests
          path: test-results.xml
          reporter: jest-junit
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        continue-on-error: true
        with:
          files: ./test-coverage/coverage.xml
          flags: e2e
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Tear down Docker Compose
        if: always()
        run: docker-compose -f development_tools/compose.yml down --volumes
  selenium:
    name: Selenium tests
    runs-on: ubuntu-latest
    env:
      DOCKER_DEFAULT_PLATFORM: linux/amd64
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/aurora
      CACHE_DEFAULT: redis://localhost:6379/0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            libjpeg-dev \
            zlib1g-dev \
            postgresql-client \
            libpq-dev \
            python3-psycopg2 \
            python3-gdal \
            gdal-bin \
            libcairo2 \
            libcairo2-dev \
            libffi-dev \
            libgdk-pixbuf2.0-0 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            shared-mime-info \
            wkhtmltopdf

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Launch services with Docker Compose
        run: |
          docker-compose -f development_tools/compose.yml up -d

      - name: Wait for Postgres to be ready
        run: |
          until docker exec $(docker-compose -f development_tools/compose.yml ps -q db) pg_isready -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Wait for Redis to be ready
        run: |
          until docker exec $(docker-compose -f development_tools/compose.yml ps -q redis) redis-cli ping | grep PONG; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Set up Node.js & Yarn
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: src/frontend/yarn.lock


      - name: Install JS dependencies & build
        run: |
          cd src/frontend
          yarn install --frozen-lockfile
          yarn build-for-backend

      - name: Install Python & UV
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
          enable-cache: true
          prune-cache: false
          cache-local-path: ./uv-cache
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
          python-version: 3.13

      - name: Restore cached vEnv
        id: cache-venv-restore
        uses: actions/cache@v4
        with:
          path: |
            ./venv
            ./tox
          key: ${{ runner.os }}-venv

      - name: Install dependencies
        run: uv sync --cache-dir ./uv-cache --frozen

      - name: Save vEnv cache
        id: cache-venv-save
        uses: actions/cache@v4
        with:
          path: |
            ./venv
            ./tox
          key: ${{ runner.os }}-venv

      - name: Run Selenium suite
        run: uv run tox -e selenium --  -n 4 --cov-report xml:test-coverage/coverage.xml --junit-xml=test-results.xml --cov-config=.coveragerc --cov=hope
      - name: Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: JEST Tests
          path: test-results.xml
          reporter: jest-junit

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: report
          path: ./tests/e2e/output_data/
          retention-days: 5
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        continue-on-error: true
        with:
          files: ./test-coverage/coverage.xml
          flags: e2e
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Tear down Docker Compose
        if: always()
        run: docker-compose -f development_tools/compose.yml down --volumes
